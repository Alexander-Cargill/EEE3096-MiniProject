
LOT_Transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004424  08004424  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004424  08004424  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004424  08004424  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800442c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000074  080044a0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080044a0  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebf1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f82  00000000  00000000  0002ec8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00030c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00031930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012396  00000000  00000000  00032588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010034  00000000  00000000  0004491e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071e01  00000000  00000000  00054952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c6753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  000c67a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004378 	.word	0x08004378

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004378 	.word	0x08004378

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fbd2 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f809 	bl	8000252 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f93c 	bl	80004bc <MX_GPIO_Init>
  MX_ADC_Init();
 8000244:	f000 f856 	bl	80002f4 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f908 	bl	800045c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800024c:	f000 f8ae 	bl	80003ac <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x1c>

08000252 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000252:	b590      	push	{r4, r7, lr}
 8000254:	b091      	sub	sp, #68	; 0x44
 8000256:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000258:	2410      	movs	r4, #16
 800025a:	193b      	adds	r3, r7, r4
 800025c:	0018      	movs	r0, r3
 800025e:	2330      	movs	r3, #48	; 0x30
 8000260:	001a      	movs	r2, r3
 8000262:	2100      	movs	r1, #0
 8000264:	f003 fc16 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	003b      	movs	r3, r7
 800026a:	0018      	movs	r0, r3
 800026c:	2310      	movs	r3, #16
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f003 fc0f 	bl	8003a94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000276:	0021      	movs	r1, r4
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2212      	movs	r2, #18
 800027c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2201      	movs	r2, #1
 8000282:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2201      	movs	r2, #1
 8000288:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2210      	movs	r2, #16
 800028e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2210      	movs	r2, #16
 8000294:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2202      	movs	r2, #2
 800029a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	22a0      	movs	r2, #160	; 0xa0
 80002a6:	0392      	lsls	r2, r2, #14
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2200      	movs	r2, #0
 80002ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fbd0 	bl	8001a58 <HAL_RCC_OscConfig>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002bc:	f000 fa1c 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	003b      	movs	r3, r7
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	003b      	movs	r3, r7
 80002c8:	2202      	movs	r2, #2
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	003b      	movs	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	003b      	movs	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d8:	003b      	movs	r3, r7
 80002da:	2101      	movs	r1, #1
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 fed5 	bl	800208c <HAL_RCC_ClockConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002e6:	f000 fa07 	bl	80006f8 <Error_Handler>
  }
}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	46bd      	mov	sp, r7
 80002ee:	b011      	add	sp, #68	; 0x44
 80002f0:	bd90      	pop	{r4, r7, pc}
	...

080002f4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	0018      	movs	r0, r3
 80002fe:	230c      	movs	r3, #12
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f003 fbc6 	bl	8003a94 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000308:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <MX_ADC_Init+0xb0>)
 800030a:	4a27      	ldr	r2, [pc, #156]	; (80003a8 <MX_ADC_Init+0xb4>)
 800030c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000314:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000316:	2210      	movs	r2, #16
 8000318:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <MX_ADC_Init+0xb0>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000320:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000322:	2201      	movs	r2, #1
 8000324:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000328:	2204      	movs	r2, #4
 800032a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_ADC_Init+0xb0>)
 800032e:	2200      	movs	r2, #0
 8000330:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000334:	2200      	movs	r2, #0
 8000336:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_ADC_Init+0xb0>)
 800033a:	2200      	movs	r2, #0
 800033c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000340:	2200      	movs	r2, #0
 8000342:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000346:	22c2      	movs	r2, #194	; 0xc2
 8000348:	32ff      	adds	r2, #255	; 0xff
 800034a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_ADC_Init+0xb0>)
 800034e:	2200      	movs	r2, #0
 8000350:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000354:	2224      	movs	r2, #36	; 0x24
 8000356:	2100      	movs	r1, #0
 8000358:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_ADC_Init+0xb0>)
 800035c:	2201      	movs	r2, #1
 800035e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000360:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_ADC_Init+0xb0>)
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fba0 	bl	8000aa8 <HAL_ADC_Init>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800036c:	f000 f9c4 	bl	80006f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2205      	movs	r2, #5
 8000374:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	2280      	movs	r2, #128	; 0x80
 800037a:	0152      	lsls	r2, r2, #5
 800037c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	0552      	lsls	r2, r2, #21
 8000384:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000386:	1d3a      	adds	r2, r7, #4
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_ADC_Init+0xb0>)
 800038a:	0011      	movs	r1, r2
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fe03 	bl	8000f98 <HAL_ADC_ConfigChannel>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000396:	f000 f9af 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b004      	add	sp, #16
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	20000090 	.word	0x20000090
 80003a8:	40012400 	.word	0x40012400

080003ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b2:	2308      	movs	r3, #8
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	0018      	movs	r0, r3
 80003b8:	2310      	movs	r3, #16
 80003ba:	001a      	movs	r2, r3
 80003bc:	2100      	movs	r1, #0
 80003be:	f003 fb69 	bl	8003a94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c2:	003b      	movs	r3, r7
 80003c4:	0018      	movs	r0, r3
 80003c6:	2308      	movs	r3, #8
 80003c8:	001a      	movs	r2, r3
 80003ca:	2100      	movs	r1, #0
 80003cc:	f003 fb62 	bl	8003a94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003d0:	4b1e      	ldr	r3, [pc, #120]	; (800044c <MX_TIM3_Init+0xa0>)
 80003d2:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <MX_TIM3_Init+0xa4>)
 80003d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <MX_TIM3_Init+0xa0>)
 80003d8:	4a1e      	ldr	r2, [pc, #120]	; (8000454 <MX_TIM3_Init+0xa8>)
 80003da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003dc:	4b1b      	ldr	r3, [pc, #108]	; (800044c <MX_TIM3_Init+0xa0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <MX_TIM3_Init+0xa0>)
 80003e4:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <MX_TIM3_Init+0xac>)
 80003e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_TIM3_Init+0xa0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_TIM3_Init+0xa0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_TIM3_Init+0xa0>)
 80003f6:	0018      	movs	r0, r3
 80003f8:	f001 ff9a 	bl	8002330 <HAL_TIM_Base_Init>
 80003fc:	1e03      	subs	r3, r0, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000400:	f000 f97a 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000404:	2108      	movs	r1, #8
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	0152      	lsls	r2, r2, #5
 800040c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800040e:	187a      	adds	r2, r7, r1
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_TIM3_Init+0xa0>)
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f002 f8f1 	bl	80025fc <HAL_TIM_ConfigClockSource>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800041e:	f000 f96b 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000422:	003b      	movs	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	003b      	movs	r3, r7
 800042a:	2200      	movs	r2, #0
 800042c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800042e:	003a      	movs	r2, r7
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_TIM3_Init+0xa0>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f002 faf7 	bl	8002a28 <HAL_TIMEx_MasterConfigSynchronization>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800043e:	f000 f95b 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b006      	add	sp, #24
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	200000d0 	.word	0x200000d0
 8000450:	40000400 	.word	0x40000400
 8000454:	000012bf 	.word	0x000012bf
 8000458:	0000ffff 	.word	0x0000ffff

0800045c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000462:	4a15      	ldr	r2, [pc, #84]	; (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000468:	2296      	movs	r2, #150	; 0x96
 800046a:	0212      	lsls	r2, r2, #8
 800046c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049e:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <MX_USART2_UART_Init+0x58>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f002 fb2f 	bl	8002b04 <HAL_UART_Init>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004aa:	f000 f925 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000118 	.word	0x20000118
 80004b8:	40004400 	.word	0x40004400

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b089      	sub	sp, #36	; 0x24
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	240c      	movs	r4, #12
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2314      	movs	r3, #20
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 fae1 	bl	8003a94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b2a      	ldr	r3, [pc, #168]	; (800057c <MX_GPIO_Init+0xc0>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b29      	ldr	r3, [pc, #164]	; (800057c <MX_GPIO_Init+0xc0>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0289      	lsls	r1, r1, #10
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b26      	ldr	r3, [pc, #152]	; (800057c <MX_GPIO_Init+0xc0>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	029b      	lsls	r3, r3, #10
 80004e8:	4013      	ands	r3, r2
 80004ea:	60bb      	str	r3, [r7, #8]
 80004ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b23      	ldr	r3, [pc, #140]	; (800057c <MX_GPIO_Init+0xc0>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <MX_GPIO_Init+0xc0>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0309      	lsls	r1, r1, #12
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_GPIO_Init+0xc0>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	031b      	lsls	r3, r3, #12
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800050a:	23c0      	movs	r3, #192	; 0xc0
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	481c      	ldr	r0, [pc, #112]	; (8000580 <MX_GPIO_Init+0xc4>)
 8000510:	2200      	movs	r2, #0
 8000512:	0019      	movs	r1, r3
 8000514:	f001 fa5c 	bl	80019d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2201      	movs	r2, #1
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2288      	movs	r2, #136	; 0x88
 8000522:	0352      	lsls	r2, r2, #13
 8000524:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	193a      	adds	r2, r7, r4
 800052e:	2390      	movs	r3, #144	; 0x90
 8000530:	05db      	lsls	r3, r3, #23
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f8db 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	22c0      	movs	r2, #192	; 0xc0
 8000540:	0092      	lsls	r2, r2, #2
 8000542:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2201      	movs	r2, #1
 8000548:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000556:	187b      	adds	r3, r7, r1
 8000558:	4a09      	ldr	r2, [pc, #36]	; (8000580 <MX_GPIO_Init+0xc4>)
 800055a:	0019      	movs	r1, r3
 800055c:	0010      	movs	r0, r2
 800055e:	f001 f8c7 	bl	80016f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2005      	movs	r0, #5
 8000568:	f001 f812 	bl	8001590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800056c:	2005      	movs	r0, #5
 800056e:	f001 f824 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b009      	add	sp, #36	; 0x24
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800

08000584 <TIM3_IRQHandler>:

/* USER CODE BEGIN 4 */

void TIM3_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <TIM3_IRQHandler+0x14>)
 800058a:	0018      	movs	r0, r3
 800058c:	f001 ff20 	bl	80023d0 <HAL_TIM_IRQHandler>


  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000590:	46c0      	nop			; (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	200000d0 	.word	0x200000d0

0800059c <EXTI0_1_IRQHandler>:


void EXTI0_1_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fa32 	bl	8001a0c <HAL_GPIO_EXTI_IRQHandler>

  	if(HAL_GetTick() - ButtonTime > 300)
 80005a8:	f000 fa74 	bl	8000a94 <HAL_GetTick>
 80005ac:	0002      	movs	r2, r0
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <EXTI0_1_IRQHandler+0xf8>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	1ad2      	subs	r2, r2, r3
 80005b4:	2396      	movs	r3, #150	; 0x96
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d902      	bls.n	80005c2 <EXTI0_1_IRQHandler+0x26>
  	{
  		Bounce = 0;
 80005bc:	4b36      	ldr	r3, [pc, #216]	; (8000698 <EXTI0_1_IRQHandler+0xfc>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
  	}

  	if(Bounce == 0)
 80005c2:	4b35      	ldr	r3, [pc, #212]	; (8000698 <EXTI0_1_IRQHandler+0xfc>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d15f      	bne.n	800068a <EXTI0_1_IRQHandler+0xee>
  	{
  		int val = pollADC();
 80005ca:	f000 f875 	bl	80006b8 <pollADC>
 80005ce:	0003      	movs	r3, r0
 80005d0:	607b      	str	r3, [r7, #4]
  		sprintf(buffer, "Sensor Reading %d\n", val);
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	4931      	ldr	r1, [pc, #196]	; (800069c <EXTI0_1_IRQHandler+0x100>)
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <EXTI0_1_IRQHandler+0x104>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f003 fa63 	bl	8003aa4 <siprintf>
  		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 80005de:	23fa      	movs	r3, #250	; 0xfa
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	492f      	ldr	r1, [pc, #188]	; (80006a0 <EXTI0_1_IRQHandler+0x104>)
 80005e4:	482f      	ldr	r0, [pc, #188]	; (80006a4 <EXTI0_1_IRQHandler+0x108>)
 80005e6:	2240      	movs	r2, #64	; 0x40
 80005e8:	f002 fae0 	bl	8002bac <HAL_UART_Transmit>


  		MessageIndex = 1;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <EXTI0_1_IRQHandler+0x10c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
  		Message[0] = 1;		// Start Bit
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]

  		if(MessageType == ADC_SAMPLE)
 80005f8:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <EXTI0_1_IRQHandler+0x114>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d106      	bne.n	800060e <EXTI0_1_IRQHandler+0x72>
  		{
  			Message[1] = '0'; // using chars for UART not the best method.
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	705a      	strb	r2, [r3, #1]
  			Message[2] = '0';
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 8000608:	2230      	movs	r2, #48	; 0x30
 800060a:	709a      	strb	r2, [r3, #2]
 800060c:	e014      	b.n	8000638 <EXTI0_1_IRQHandler+0x9c>
  		}
  		else if(MessageType == NO_CHANGE)
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <EXTI0_1_IRQHandler+0x114>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b02      	cmp	r3, #2
 8000614:	d106      	bne.n	8000624 <EXTI0_1_IRQHandler+0x88>
  		{
  			Message[1] = 0;
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 8000618:	2200      	movs	r2, #0
 800061a:	705a      	strb	r2, [r3, #1]
  			Message[2] = 1;
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 800061e:	2201      	movs	r2, #1
 8000620:	709a      	strb	r2, [r3, #2]
 8000622:	e009      	b.n	8000638 <EXTI0_1_IRQHandler+0x9c>
  		}
  		else if(MessageType == CHECKPOINT)
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <EXTI0_1_IRQHandler+0x114>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b03      	cmp	r3, #3
 800062a:	d105      	bne.n	8000638 <EXTI0_1_IRQHandler+0x9c>
  		{
  			Message[1] = 1;
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 800062e:	2201      	movs	r2, #1
 8000630:	705a      	strb	r2, [r3, #1]
  			Message[2] = 0;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 8000634:	2200      	movs	r2, #0
 8000636:	709a      	strb	r2, [r3, #2]
  		}

  		for(int i = 10; i > 2; i--)
 8000638:	230a      	movs	r3, #10
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	e012      	b.n	8000664 <EXTI0_1_IRQHandler+0xc8>
  		{
  			Message[i] = (char) val%2;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	b2d9      	uxtb	r1, r3
 8000648:	4a18      	ldr	r2, [pc, #96]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	1c0a      	adds	r2, r1, #0
 8000650:	701a      	strb	r2, [r3, #0]
  			val = val/2;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	da00      	bge.n	800065a <EXTI0_1_IRQHandler+0xbe>
 8000658:	3301      	adds	r3, #1
 800065a:	105b      	asrs	r3, r3, #1
 800065c:	607b      	str	r3, [r7, #4]
  		for(int i = 10; i > 2; i--)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	2b02      	cmp	r3, #2
 8000668:	dce9      	bgt.n	800063e <EXTI0_1_IRQHandler+0xa2>
  		}
  		Message[11] = '\0'; // Terminating character
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 800066c:	2200      	movs	r2, #0
 800066e:	72da      	strb	r2, [r3, #11]

  		sprintf(buffer, "Encoded Message %s\n", Message);
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <EXTI0_1_IRQHandler+0x110>)
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <EXTI0_1_IRQHandler+0x118>)
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <EXTI0_1_IRQHandler+0x104>)
 8000676:	0018      	movs	r0, r3
 8000678:	f003 fa14 	bl	8003aa4 <siprintf>
  		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 1000);
 800067c:	23fa      	movs	r3, #250	; 0xfa
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4907      	ldr	r1, [pc, #28]	; (80006a0 <EXTI0_1_IRQHandler+0x104>)
 8000682:	4808      	ldr	r0, [pc, #32]	; (80006a4 <EXTI0_1_IRQHandler+0x108>)
 8000684:	2240      	movs	r2, #64	; 0x40
 8000686:	f002 fa91 	bl	8002bac <HAL_UART_Transmit>


  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	200001ec 	.word	0x200001ec
 8000698:	200001f0 	.word	0x200001f0
 800069c:	08004390 	.word	0x08004390
 80006a0:	2000019c 	.word	0x2000019c
 80006a4:	20000118 	.word	0x20000118
 80006a8:	200001dc 	.word	0x200001dc
 80006ac:	200001e0 	.word	0x200001e0
 80006b0:	20000000 	.word	0x20000000
 80006b4:	080043a4 	.word	0x080043a4

080006b8 <pollADC>:


uint32_t pollADC(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	//TO DO:
	//TASK 2
	int val = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc);
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <pollADC+0x3c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fb2f 	bl	8000d28 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <pollADC+0x3c>)
 80006cc:	2164      	movs	r1, #100	; 0x64
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fbbe 	bl	8000e50 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(&hadc);
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <pollADC+0x3c>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 fc52 	bl	8000f80 <HAL_ADC_GetValue>
 80006dc:	0003      	movs	r3, r0
 80006de:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <pollADC+0x3c>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fb74 	bl	8000dd0 <HAL_ADC_Stop>

	return val;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	20000090 	.word	0x20000090

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <HAL_MspInit+0x44>)
 800070c:	699a      	ldr	r2, [r3, #24]
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <HAL_MspInit+0x44>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	619a      	str	r2, [r3, #24]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_MspInit+0x44>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x44>)
 8000724:	69da      	ldr	r2, [r3, #28]
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_MspInit+0x44>)
 8000728:	2180      	movs	r1, #128	; 0x80
 800072a:	0549      	lsls	r1, r1, #21
 800072c:	430a      	orrs	r2, r1
 800072e:	61da      	str	r2, [r3, #28]
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_MspInit+0x44>)
 8000732:	69da      	ldr	r2, [r3, #28]
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	055b      	lsls	r3, r3, #21
 8000738:	4013      	ands	r3, r2
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	40021000 	.word	0x40021000

0800074c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b08b      	sub	sp, #44	; 0x2c
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	2414      	movs	r4, #20
 8000756:	193b      	adds	r3, r7, r4
 8000758:	0018      	movs	r0, r3
 800075a:	2314      	movs	r3, #20
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f003 f998 	bl	8003a94 <memset>
  if(hadc->Instance==ADC1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <HAL_ADC_MspInit+0x84>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12b      	bne.n	80007c6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_ADC_MspInit+0x88>)
 8000770:	699a      	ldr	r2, [r3, #24]
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_ADC_MspInit+0x88>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0089      	lsls	r1, r1, #2
 8000778:	430a      	orrs	r2, r1
 800077a:	619a      	str	r2, [r3, #24]
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_ADC_MspInit+0x88>)
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4013      	ands	r3, r2
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_ADC_MspInit+0x88>)
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_ADC_MspInit+0x88>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0289      	lsls	r1, r1, #10
 8000794:	430a      	orrs	r2, r1
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_ADC_MspInit+0x88>)
 800079a:	695a      	ldr	r2, [r3, #20]
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	029b      	lsls	r3, r3, #10
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2220      	movs	r2, #32
 80007aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2203      	movs	r2, #3
 80007b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 80007b8:	193a      	adds	r2, r7, r4
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 ff95 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b00b      	add	sp, #44	; 0x2c
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40012400 	.word	0x40012400
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <HAL_TIM_Base_MspInit+0x44>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d113      	bne.n	8000812 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007ec:	69da      	ldr	r2, [r3, #28]
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007f0:	2102      	movs	r1, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	61da      	str	r2, [r3, #28]
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	2202      	movs	r2, #2
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2010      	movs	r0, #16
 8000808:	f000 fec2 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800080c:	2010      	movs	r0, #16
 800080e:	f000 fed4 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b004      	add	sp, #16
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	40000400 	.word	0x40000400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b08b      	sub	sp, #44	; 0x2c
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	2414      	movs	r4, #20
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	2314      	movs	r3, #20
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f003 f92c 	bl	8003a94 <memset>
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a20      	ldr	r2, [pc, #128]	; (80008c4 <HAL_UART_MspInit+0xa0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d13a      	bne.n	80008bc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 8000848:	69da      	ldr	r2, [r3, #28]
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0289      	lsls	r1, r1, #10
 8000850:	430a      	orrs	r2, r1
 8000852:	61da      	str	r2, [r3, #28]
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 8000856:	69da      	ldr	r2, [r3, #28]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	029b      	lsls	r3, r3, #10
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 8000864:	695a      	ldr	r2, [r3, #20]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	0289      	lsls	r1, r1, #10
 800086c:	430a      	orrs	r2, r1
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0xa4>)
 8000872:	695a      	ldr	r2, [r3, #20]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	029b      	lsls	r3, r3, #10
 8000878:	4013      	ands	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087e:	0021      	movs	r1, r4
 8000880:	187b      	adds	r3, r7, r1
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2202      	movs	r2, #2
 800088a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2203      	movs	r2, #3
 8000896:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2201      	movs	r2, #1
 800089c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	187a      	adds	r2, r7, r1
 80008a0:	2390      	movs	r3, #144	; 0x90
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 ff22 	bl	80016f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	201c      	movs	r0, #28
 80008b2:	f000 fe6d 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008b6:	201c      	movs	r0, #28
 80008b8:	f000 fe7f 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b00b      	add	sp, #44	; 0x2c
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	40004400 	.word	0x40004400
 80008c8:	40021000 	.word	0x40021000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 f8be 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <USART2_IRQHandler+0x14>)
 8000902:	0018      	movs	r0, r3
 8000904:	f002 f9fc 	bl	8002d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	20000118 	.word	0x20000118

08000914 <_sbrk>:
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	18d3      	adds	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
 8000944:	f003 f87c 	bl	8003a40 <__errno>
 8000948:	0003      	movs	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	2301      	movs	r3, #1
 8000950:	425b      	negs	r3, r3
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	18d2      	adds	r2, r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b006      	add	sp, #24
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20002000 	.word	0x20002000
 8000974:	00000400 	.word	0x00000400
 8000978:	200001f4 	.word	0x200001f4
 800097c:	20000210 	.word	0x20000210

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <Reset_Handler>:
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x2>)
 800098e:	4685      	mov	sp, r0
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <LoopForever+0x6>)
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <LoopForever+0xa>)
 8000994:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <LoopForever+0xe>)
 8000996:	2300      	movs	r3, #0
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:
 800099a:	58d4      	ldr	r4, [r2, r3]
 800099c:	50c4      	str	r4, [r0, r3]
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:
 80009a0:	18c4      	adds	r4, r0, r3
 80009a2:	428c      	cmp	r4, r1
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopForever+0x12>)
 80009a8:	4c0b      	ldr	r4, [pc, #44]	; (80009d8 <LoopForever+0x16>)
 80009aa:	2300      	movs	r3, #0
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:
 80009b2:	42a2      	cmp	r2, r4
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>
 80009b6:	f7ff ffe3 	bl	8000980 <SystemInit>
 80009ba:	f003 f847 	bl	8003a4c <__libc_init_array>
 80009be:	f7ff fc39 	bl	8000234 <main>

080009c2 <LoopForever>:
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
 80009c4:	20002000 	.word	0x20002000
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000074 	.word	0x20000074
 80009d0:	0800442c 	.word	0x0800442c
 80009d4:	20000074 	.word	0x20000074
 80009d8:	2000020c 	.word	0x2000020c

080009dc <ADC1_COMP_IRQHandler>:
 80009dc:	e7fe      	b.n	80009dc <ADC1_COMP_IRQHandler>
	...

080009e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_Init+0x24>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_Init+0x24>)
 80009ea:	2110      	movs	r1, #16
 80009ec:	430a      	orrs	r2, r1
 80009ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 f809 	bl	8000a08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f6:	f7ff fe85 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_InitTick+0x5c>)
 8000a12:	681c      	ldr	r4, [r3, #0]
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_InitTick+0x60>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	0019      	movs	r1, r3
 8000a1a:	23fa      	movs	r3, #250	; 0xfa
 8000a1c:	0098      	lsls	r0, r3, #2
 8000a1e:	f7ff fb7d 	bl	800011c <__udivsi3>
 8000a22:	0003      	movs	r3, r0
 8000a24:	0019      	movs	r1, r3
 8000a26:	0020      	movs	r0, r4
 8000a28:	f7ff fb78 	bl	800011c <__udivsi3>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fdd3 	bl	80015da <HAL_SYSTICK_Config>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e00f      	b.n	8000a5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d80b      	bhi.n	8000a5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	2301      	movs	r3, #1
 8000a46:	425b      	negs	r3, r3
 8000a48:	2200      	movs	r2, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fda0 	bl	8001590 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_InitTick+0x64>)
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b003      	add	sp, #12
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	20000004 	.word	0x20000004
 8000a68:	2000000c 	.word	0x2000000c
 8000a6c:	20000008 	.word	0x20000008

08000a70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x1c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x20>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	18d2      	adds	r2, r2, r3
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_IncTick+0x20>)
 8000a82:	601a      	str	r2, [r3, #0]
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	200001f8 	.word	0x200001f8

08000a94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <HAL_GetTick+0x10>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	200001f8 	.word	0x200001f8

08000aa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e125      	b.n	8000d12 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10a      	bne.n	8000ae4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2234      	movs	r2, #52	; 0x34
 8000ad8:	2100      	movs	r1, #0
 8000ada:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fe34 	bl	800074c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ae8:	2210      	movs	r2, #16
 8000aea:	4013      	ands	r3, r2
 8000aec:	d000      	beq.n	8000af0 <HAL_ADC_Init+0x48>
 8000aee:	e103      	b.n	8000cf8 <HAL_ADC_Init+0x250>
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d000      	beq.n	8000afc <HAL_ADC_Init+0x54>
 8000afa:	e0fd      	b.n	8000cf8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2204      	movs	r2, #4
 8000b04:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b06:	d000      	beq.n	8000b0a <HAL_ADC_Init+0x62>
 8000b08:	e0f6      	b.n	8000cf8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b0e:	4a83      	ldr	r2, [pc, #524]	; (8000d1c <HAL_ADC_Init+0x274>)
 8000b10:	4013      	ands	r3, r2
 8000b12:	2202      	movs	r2, #2
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2203      	movs	r2, #3
 8000b22:	4013      	ands	r3, r2
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d112      	bne.n	8000b4e <HAL_ADC_Init+0xa6>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d009      	beq.n	8000b4a <HAL_ADC_Init+0xa2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	401a      	ands	r2, r3
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d101      	bne.n	8000b4e <HAL_ADC_Init+0xa6>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e000      	b.n	8000b50 <HAL_ADC_Init+0xa8>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d116      	bne.n	8000b82 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	2218      	movs	r2, #24
 8000b5c:	4393      	bics	r3, r2
 8000b5e:	0019      	movs	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689a      	ldr	r2, [r3, #8]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	0899      	lsrs	r1, r3, #2
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4964      	ldr	r1, [pc, #400]	; (8000d20 <HAL_ADC_Init+0x278>)
 8000b8e:	400a      	ands	r2, r1
 8000b90:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7e1b      	ldrb	r3, [r3, #24]
 8000b96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	7e5b      	ldrb	r3, [r3, #25]
 8000b9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000b9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7e9b      	ldrb	r3, [r3, #26]
 8000ba4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ba6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d002      	beq.n	8000bb6 <HAL_ADC_Init+0x10e>
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	015b      	lsls	r3, r3, #5
 8000bb4:	e000      	b.n	8000bb8 <HAL_ADC_Init+0x110>
 8000bb6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bb8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000bbe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d101      	bne.n	8000bcc <HAL_ADC_Init+0x124>
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e000      	b.n	8000bce <HAL_ADC_Init+0x126>
 8000bcc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000bce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2124      	movs	r1, #36	; 0x24
 8000bd4:	5c5b      	ldrb	r3, [r3, r1]
 8000bd6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bd8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7edb      	ldrb	r3, [r3, #27]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d115      	bne.n	8000c14 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	7e9b      	ldrb	r3, [r3, #26]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d105      	bne.n	8000bfc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	0252      	lsls	r2, r2, #9
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	e00b      	b.n	8000c14 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c00:	2220      	movs	r2, #32
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69da      	ldr	r2, [r3, #28]
 8000c18:	23c2      	movs	r3, #194	; 0xc2
 8000c1a:	33ff      	adds	r3, #255	; 0xff
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d007      	beq.n	8000c30 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	055b      	lsls	r3, r3, #21
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d01b      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d017      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d013      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d00f      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d00b      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d007      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c78:	2b06      	cmp	r3, #6
 8000c7a:	d003      	beq.n	8000c84 <HAL_ADC_Init+0x1dc>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	2b07      	cmp	r3, #7
 8000c82:	d112      	bne.n	8000caa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2107      	movs	r1, #7
 8000c90:	438a      	bics	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6959      	ldr	r1, [r3, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <HAL_ADC_Init+0x27c>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4393      	bics	r3, r2
 8000cc8:	2201      	movs	r2, #1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cd0:	e01c      	b.n	8000d0c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd6:	2212      	movs	r2, #18
 8000cd8:	4393      	bics	r3, r2
 8000cda:	2210      	movs	r2, #16
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000cee:	230f      	movs	r3, #15
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000cf6:	e009      	b.n	8000d0c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	18fb      	adds	r3, r7, r3
 8000d10:	781b      	ldrb	r3, [r3, #0]
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	fffffefd 	.word	0xfffffefd
 8000d20:	fffe0219 	.word	0xfffe0219
 8000d24:	833fffe7 	.word	0x833fffe7

08000d28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d30:	230f      	movs	r3, #15
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4013      	ands	r3, r2
 8000d42:	d138      	bne.n	8000db6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2234      	movs	r2, #52	; 0x34
 8000d48:	5c9b      	ldrb	r3, [r3, r2]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_Start+0x2a>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e038      	b.n	8000dc4 <HAL_ADC_Start+0x9c>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2234      	movs	r2, #52	; 0x34
 8000d56:	2101      	movs	r1, #1
 8000d58:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7e5b      	ldrb	r3, [r3, #25]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d007      	beq.n	8000d72 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fc      	adds	r4, r7, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fa23 	bl	80011b4 <ADC_Enable>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d72:	230f      	movs	r3, #15
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d120      	bne.n	8000dbe <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_ADC_Start+0xa4>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0052      	lsls	r2, r2, #1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2234      	movs	r2, #52	; 0x34
 8000d98:	2100      	movs	r1, #0
 8000d9a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	221c      	movs	r2, #28
 8000da2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2104      	movs	r1, #4
 8000db0:	430a      	orrs	r2, r1
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	e003      	b.n	8000dbe <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000db6:	230f      	movs	r3, #15
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b005      	add	sp, #20
 8000dca:	bd90      	pop	{r4, r7, pc}
 8000dcc:	fffff0fe 	.word	0xfffff0fe

08000dd0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2234      	movs	r2, #52	; 0x34
 8000de4:	5c9b      	ldrb	r3, [r3, r2]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d101      	bne.n	8000dee <HAL_ADC_Stop+0x1e>
 8000dea:	2302      	movs	r3, #2
 8000dec:	e029      	b.n	8000e42 <HAL_ADC_Stop+0x72>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2234      	movs	r2, #52	; 0x34
 8000df2:	2101      	movs	r1, #1
 8000df4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000df6:	250f      	movs	r5, #15
 8000df8:	197c      	adds	r4, r7, r5
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 face 	bl	800139e <ADC_ConversionStop>
 8000e02:	0003      	movs	r3, r0
 8000e04:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e06:	197b      	adds	r3, r7, r5
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d112      	bne.n	8000e34 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e0e:	197c      	adds	r4, r7, r5
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fa52 	bl	80012bc <ADC_Disable>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e1c:	197b      	adds	r3, r7, r5
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d107      	bne.n	8000e34 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e28:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <HAL_ADC_Stop+0x7c>)
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2234      	movs	r2, #52	; 0x34
 8000e38:	2100      	movs	r1, #0
 8000e3a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	fffffefe 	.word	0xfffffefe

08000e50 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d102      	bne.n	8000e68 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e62:	2308      	movs	r3, #8
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e014      	b.n	8000e92 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4013      	ands	r3, r2
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10b      	bne.n	8000e8e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2234      	movs	r2, #52	; 0x34
 8000e86:	2100      	movs	r1, #0
 8000e88:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e071      	b.n	8000f72 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000e8e:	230c      	movs	r3, #12
 8000e90:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e92:	f7ff fdff 	bl	8000a94 <HAL_GetTick>
 8000e96:	0003      	movs	r3, r0
 8000e98:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000e9a:	e01f      	b.n	8000edc <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	d01c      	beq.n	8000edc <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <HAL_ADC_PollForConversion+0x68>
 8000ea8:	f7ff fdf4 	bl	8000a94 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	683a      	ldr	r2, [r7, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d211      	bcs.n	8000edc <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d10b      	bne.n	8000edc <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec8:	2204      	movs	r2, #4
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2234      	movs	r2, #52	; 0x34
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e04a      	b.n	8000f72 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d0d9      	beq.n	8000e9c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4013      	ands	r3, r2
 8000f02:	d12d      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d129      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2208      	movs	r2, #8
 8000f14:	4013      	ands	r3, r2
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	d122      	bne.n	8000f60 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2204      	movs	r2, #4
 8000f22:	4013      	ands	r3, r2
 8000f24:	d110      	bne.n	8000f48 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	210c      	movs	r1, #12
 8000f32:	438a      	bics	r2, r1
 8000f34:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_ADC_PollForConversion+0x12c>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2201      	movs	r2, #1
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
 8000f46:	e00b      	b.n	8000f60 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f58:	2201      	movs	r2, #1
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7e1b      	ldrb	r3, [r3, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d103      	bne.n	8000f70 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	220c      	movs	r2, #12
 8000f6e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	fffffefe 	.word	0xfffffefe

08000f80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b002      	add	sp, #8
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	055b      	lsls	r3, r3, #21
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d011      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d00d      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d009      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d005      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d001      	beq.n	8000fde <HAL_ADC_ConfigChannel+0x46>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2234      	movs	r2, #52	; 0x34
 8000fe2:	5c9b      	ldrb	r3, [r3, r2]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x54>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e0d0      	b.n	800118e <HAL_ADC_ConfigChannel+0x1f6>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2234      	movs	r2, #52	; 0x34
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	d000      	beq.n	8001002 <HAL_ADC_ConfigChannel+0x6a>
 8001000:	e0b4      	b.n	800116c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	4a64      	ldr	r2, [pc, #400]	; (8001198 <HAL_ADC_ConfigChannel+0x200>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d100      	bne.n	800100e <HAL_ADC_ConfigChannel+0x76>
 800100c:	e082      	b.n	8001114 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2201      	movs	r2, #1
 800101a:	409a      	lsls	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	430a      	orrs	r2, r1
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	055b      	lsls	r3, r3, #21
 800102c:	429a      	cmp	r2, r3
 800102e:	d037      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	2b01      	cmp	r3, #1
 8001036:	d033      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	2b02      	cmp	r3, #2
 800103e:	d02f      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	2b03      	cmp	r3, #3
 8001046:	d02b      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	2b04      	cmp	r3, #4
 800104e:	d027      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b05      	cmp	r3, #5
 8001056:	d023      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	2b06      	cmp	r3, #6
 800105e:	d01f      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	2b07      	cmp	r3, #7
 8001066:	d01b      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	2107      	movs	r1, #7
 8001074:	400b      	ands	r3, r1
 8001076:	429a      	cmp	r2, r3
 8001078:	d012      	beq.n	80010a0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2107      	movs	r1, #7
 8001086:	438a      	bics	r2, r1
 8001088:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6959      	ldr	r1, [r3, #20]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2207      	movs	r2, #7
 8001096:	401a      	ands	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d007      	beq.n	80010b8 <HAL_ADC_ConfigChannel+0x120>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d003      	beq.n	80010b8 <HAL_ADC_ConfigChannel+0x120>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d163      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_ADC_ConfigChannel+0x204>)
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d009      	beq.n	80010d8 <HAL_ADC_ConfigChannel+0x140>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b11      	cmp	r3, #17
 80010ca:	d102      	bne.n	80010d2 <HAL_ADC_ConfigChannel+0x13a>
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	03db      	lsls	r3, r3, #15
 80010d0:	e004      	b.n	80010dc <HAL_ADC_ConfigChannel+0x144>
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	045b      	lsls	r3, r3, #17
 80010d6:	e001      	b.n	80010dc <HAL_ADC_ConfigChannel+0x144>
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <HAL_ADC_ConfigChannel+0x204>)
 80010de:	430b      	orrs	r3, r1
 80010e0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d14a      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_ADC_ConfigChannel+0x208>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	492d      	ldr	r1, [pc, #180]	; (80011a4 <HAL_ADC_ConfigChannel+0x20c>)
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff f813 	bl	800011c <__udivsi3>
 80010f6:	0003      	movs	r3, r0
 80010f8:	001a      	movs	r2, r3
 80010fa:	0013      	movs	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3b01      	subs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x16e>
 8001112:	e035      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2101      	movs	r1, #1
 8001120:	4099      	lsls	r1, r3
 8001122:	000b      	movs	r3, r1
 8001124:	43d9      	mvns	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	400a      	ands	r2, r1
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d007      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x1ae>
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b11      	cmp	r3, #17
 800113c:	d003      	beq.n	8001146 <HAL_ADC_ConfigChannel+0x1ae>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d11c      	bne.n	8001180 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_ADC_ConfigChannel+0x204>)
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b10      	cmp	r3, #16
 8001150:	d007      	beq.n	8001162 <HAL_ADC_ConfigChannel+0x1ca>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b11      	cmp	r3, #17
 8001158:	d101      	bne.n	800115e <HAL_ADC_ConfigChannel+0x1c6>
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_ADC_ConfigChannel+0x210>)
 800115c:	e002      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_ADC_ConfigChannel+0x214>)
 8001160:	e000      	b.n	8001164 <HAL_ADC_ConfigChannel+0x1cc>
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_ConfigChannel+0x218>)
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_ADC_ConfigChannel+0x204>)
 8001166:	400b      	ands	r3, r1
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e009      	b.n	8001180 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001170:	2220      	movs	r2, #32
 8001172:	431a      	orrs	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001178:	230f      	movs	r3, #15
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2234      	movs	r2, #52	; 0x34
 8001184:	2100      	movs	r1, #0
 8001186:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b004      	add	sp, #16
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	00001001 	.word	0x00001001
 800119c:	40012708 	.word	0x40012708
 80011a0:	20000004 	.word	0x20000004
 80011a4:	000f4240 	.word	0x000f4240
 80011a8:	ffbfffff 	.word	0xffbfffff
 80011ac:	feffffff 	.word	0xfeffffff
 80011b0:	ff7fffff 	.word	0xff7fffff

080011b4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2203      	movs	r2, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d112      	bne.n	80011f8 <ADC_Enable+0x44>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2201      	movs	r2, #1
 80011da:	4013      	ands	r3, r2
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d009      	beq.n	80011f4 <ADC_Enable+0x40>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	401a      	ands	r2, r3
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d101      	bne.n	80011f8 <ADC_Enable+0x44>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <ADC_Enable+0x46>
 80011f8:	2300      	movs	r3, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d152      	bne.n	80012a4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <ADC_Enable+0xfc>)
 8001206:	4013      	ands	r3, r2
 8001208:	d00d      	beq.n	8001226 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	2210      	movs	r2, #16
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121a:	2201      	movs	r2, #1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e03f      	b.n	80012a6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <ADC_Enable+0x100>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	491f      	ldr	r1, [pc, #124]	; (80012b8 <ADC_Enable+0x104>)
 800123c:	0018      	movs	r0, r3
 800123e:	f7fe ff6d 	bl	800011c <__udivsi3>
 8001242:	0003      	movs	r3, r0
 8001244:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001246:	e002      	b.n	800124e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	3b01      	subs	r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f9      	bne.n	8001248 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001254:	f7ff fc1e 	bl	8000a94 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800125c:	e01b      	b.n	8001296 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800125e:	f7ff fc19 	bl	8000a94 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d914      	bls.n	8001296 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
 8001276:	2b01      	cmp	r3, #1
 8001278:	d00d      	beq.n	8001296 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	2210      	movs	r2, #16
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128a:	2201      	movs	r2, #1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e007      	b.n	80012a6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	4013      	ands	r3, r2
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d1dc      	bne.n	800125e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b004      	add	sp, #16
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	80000017 	.word	0x80000017
 80012b4:	20000004 	.word	0x20000004
 80012b8:	000f4240 	.word	0x000f4240

080012bc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2203      	movs	r2, #3
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d112      	bne.n	80012fc <ADC_Disable+0x40>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2201      	movs	r2, #1
 80012de:	4013      	ands	r3, r2
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d009      	beq.n	80012f8 <ADC_Disable+0x3c>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68da      	ldr	r2, [r3, #12]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	401a      	ands	r2, r3
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d101      	bne.n	80012fc <ADC_Disable+0x40>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <ADC_Disable+0x42>
 80012fc:	2300      	movs	r3, #0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d048      	beq.n	8001394 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2205      	movs	r2, #5
 800130a:	4013      	ands	r3, r2
 800130c:	2b01      	cmp	r3, #1
 800130e:	d110      	bne.n	8001332 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2102      	movs	r1, #2
 800131c:	430a      	orrs	r2, r1
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2203      	movs	r2, #3
 8001326:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001328:	f7ff fbb4 	bl	8000a94 <HAL_GetTick>
 800132c:	0003      	movs	r3, r0
 800132e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001330:	e029      	b.n	8001386 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001336:	2210      	movs	r2, #16
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001342:	2201      	movs	r2, #1
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e023      	b.n	8001396 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800134e:	f7ff fba1 	bl	8000a94 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d914      	bls.n	8001386 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2201      	movs	r2, #1
 8001364:	4013      	ands	r3, r2
 8001366:	2b01      	cmp	r3, #1
 8001368:	d10d      	bne.n	8001386 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	2210      	movs	r2, #16
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137a:	2201      	movs	r2, #1
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e007      	b.n	8001396 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2201      	movs	r2, #1
 800138e:	4013      	ands	r3, r2
 8001390:	2b01      	cmp	r3, #1
 8001392:	d0dc      	beq.n	800134e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}

0800139e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2204      	movs	r2, #4
 80013b2:	4013      	ands	r3, r2
 80013b4:	d03a      	beq.n	800142c <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2204      	movs	r2, #4
 80013be:	4013      	ands	r3, r2
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d10d      	bne.n	80013e0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2202      	movs	r2, #2
 80013cc:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80013ce:	d107      	bne.n	80013e0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2110      	movs	r1, #16
 80013dc:	430a      	orrs	r2, r1
 80013de:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013e0:	f7ff fb58 	bl	8000a94 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013e8:	e01a      	b.n	8001420 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80013ea:	f7ff fb53 	bl	8000a94 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d913      	bls.n	8001420 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d00d      	beq.n	8001420 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2210      	movs	r2, #16
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2201      	movs	r2, #1
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e006      	b.n	800142e <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2204      	movs	r2, #4
 8001428:	4013      	ands	r3, r2
 800142a:	d1de      	bne.n	80013ea <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	0002      	movs	r2, r0
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b7f      	cmp	r3, #127	; 0x7f
 800144a:	d809      	bhi.n	8001460 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	001a      	movs	r2, r3
 8001452:	231f      	movs	r3, #31
 8001454:	401a      	ands	r2, r3
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_EnableIRQ+0x30>)
 8001458:	2101      	movs	r1, #1
 800145a:	4091      	lsls	r1, r2
 800145c:	000a      	movs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
  }
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	0002      	movs	r2, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b7f      	cmp	r3, #127	; 0x7f
 8001480:	d828      	bhi.n	80014d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001482:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <__NVIC_SetPriority+0xd4>)
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	33c0      	adds	r3, #192	; 0xc0
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	589b      	ldr	r3, [r3, r2]
 8001492:	1dfa      	adds	r2, r7, #7
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0011      	movs	r1, r2
 8001498:	2203      	movs	r2, #3
 800149a:	400a      	ands	r2, r1
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	21ff      	movs	r1, #255	; 0xff
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	401a      	ands	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	4003      	ands	r3, r0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <__NVIC_SetPriority+0xd4>)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	430a      	orrs	r2, r1
 80014cc:	33c0      	adds	r3, #192	; 0xc0
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014d2:	e031      	b.n	8001538 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <__NVIC_SetPriority+0xd8>)
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	0019      	movs	r1, r3
 80014dc:	230f      	movs	r3, #15
 80014de:	400b      	ands	r3, r1
 80014e0:	3b08      	subs	r3, #8
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3306      	adds	r3, #6
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	18d3      	adds	r3, r2, r3
 80014ea:	3304      	adds	r3, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1dfa      	adds	r2, r7, #7
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	0011      	movs	r1, r2
 80014f4:	2203      	movs	r2, #3
 80014f6:	400a      	ands	r2, r1
 80014f8:	00d2      	lsls	r2, r2, #3
 80014fa:	21ff      	movs	r1, #255	; 0xff
 80014fc:	4091      	lsls	r1, r2
 80014fe:	000a      	movs	r2, r1
 8001500:	43d2      	mvns	r2, r2
 8001502:	401a      	ands	r2, r3
 8001504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	22ff      	movs	r2, #255	; 0xff
 800150c:	401a      	ands	r2, r3
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	0018      	movs	r0, r3
 8001514:	2303      	movs	r3, #3
 8001516:	4003      	ands	r3, r0
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <__NVIC_SetPriority+0xd8>)
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	001c      	movs	r4, r3
 8001524:	230f      	movs	r3, #15
 8001526:	4023      	ands	r3, r4
 8001528:	3b08      	subs	r3, #8
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	430a      	orrs	r2, r1
 800152e:	3306      	adds	r3, #6
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	18c3      	adds	r3, r0, r3
 8001534:	3304      	adds	r3, #4
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b003      	add	sp, #12
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	045b      	lsls	r3, r3, #17
 8001558:	429a      	cmp	r2, r3
 800155a:	d301      	bcc.n	8001560 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155c:	2301      	movs	r3, #1
 800155e:	e010      	b.n	8001582 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <SysTick_Config+0x44>)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	3a01      	subs	r2, #1
 8001566:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001568:	2301      	movs	r3, #1
 800156a:	425b      	negs	r3, r3
 800156c:	2103      	movs	r1, #3
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ff7c 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x44>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x44>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	210f      	movs	r1, #15
 800159c:	187b      	adds	r3, r7, r1
 800159e:	1c02      	adds	r2, r0, #0
 80015a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	0002      	movs	r2, r0
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff33 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ffaf 	bl	8001548 <SysTick_Config>
 80015ea:	0003      	movs	r3, r0
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2221      	movs	r2, #33	; 0x21
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d008      	beq.n	800161a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2204      	movs	r2, #4
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	2100      	movs	r1, #0
 8001614:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e020      	b.n	800165c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	210e      	movs	r1, #14
 8001626:	438a      	bics	r2, r1
 8001628:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2101      	movs	r1, #1
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	2101      	movs	r1, #1
 8001644:	4091      	lsls	r1, r2
 8001646:	000a      	movs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2221      	movs	r2, #33	; 0x21
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2220      	movs	r2, #32
 8001656:	2100      	movs	r1, #0
 8001658:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	210f      	movs	r1, #15
 800166e:	187b      	adds	r3, r7, r1
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2221      	movs	r2, #33	; 0x21
 8001678:	5c9b      	ldrb	r3, [r3, r2]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d006      	beq.n	800168e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2204      	movs	r2, #4
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
 800168c:	e028      	b.n	80016e0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	210e      	movs	r1, #14
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2101      	movs	r1, #1
 80016aa:	438a      	bics	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	2101      	movs	r1, #1
 80016b8:	4091      	lsls	r1, r2
 80016ba:	000a      	movs	r2, r1
 80016bc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2221      	movs	r2, #33	; 0x21
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	0010      	movs	r0, r2
 80016de:	4798      	blx	r3
    } 
  }
  return status;
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e14f      	b.n	80019a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d100      	bne.n	8001718 <HAL_GPIO_Init+0x28>
 8001716:	e140      	b.n	800199a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2203      	movs	r2, #3
 800171e:	4013      	ands	r3, r2
 8001720:	2b01      	cmp	r3, #1
 8001722:	d005      	beq.n	8001730 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800172c:	2b02      	cmp	r3, #2
 800172e:	d130      	bne.n	8001792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	409a      	lsls	r2, r3
 800173e:	0013      	movs	r3, r2
 8001740:	43da      	mvns	r2, r3
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	409a      	lsls	r2, r3
 8001752:	0013      	movs	r3, r2
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001766:	2201      	movs	r2, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	43da      	mvns	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	2201      	movs	r2, #1
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2203      	movs	r2, #3
 8001798:	4013      	ands	r3, r2
 800179a:	2b03      	cmp	r3, #3
 800179c:	d017      	beq.n	80017ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2203      	movs	r2, #3
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d123      	bne.n	8001822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	58d3      	ldr	r3, [r2, r3]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	2207      	movs	r2, #7
 80017ec:	4013      	ands	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2107      	movs	r1, #7
 8001806:	400b      	ands	r3, r1
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	6939      	ldr	r1, [r7, #16]
 8001820:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	409a      	lsls	r2, r3
 8001830:	0013      	movs	r3, r2
 8001832:	43da      	mvns	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	401a      	ands	r2, r3
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	23c0      	movs	r3, #192	; 0xc0
 800185c:	029b      	lsls	r3, r3, #10
 800185e:	4013      	ands	r3, r2
 8001860:	d100      	bne.n	8001864 <HAL_GPIO_Init+0x174>
 8001862:	e09a      	b.n	800199a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <HAL_GPIO_Init+0x2c8>)
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_GPIO_Init+0x2c8>)
 800186a:	2101      	movs	r1, #1
 800186c:	430a      	orrs	r2, r1
 800186e:	619a      	str	r2, [r3, #24]
 8001870:	4b51      	ldr	r3, [pc, #324]	; (80019b8 <HAL_GPIO_Init+0x2c8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800187c:	4a4f      	ldr	r2, [pc, #316]	; (80019bc <HAL_GPIO_Init+0x2cc>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	589b      	ldr	r3, [r3, r2]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	220f      	movs	r2, #15
 8001894:	409a      	lsls	r2, r3
 8001896:	0013      	movs	r3, r2
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	2390      	movs	r3, #144	; 0x90
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d013      	beq.n	80018d2 <HAL_GPIO_Init+0x1e2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <HAL_GPIO_Init+0x2d0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d00d      	beq.n	80018ce <HAL_GPIO_Init+0x1de>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_GPIO_Init+0x2d4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d007      	beq.n	80018ca <HAL_GPIO_Init+0x1da>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a42      	ldr	r2, [pc, #264]	; (80019c8 <HAL_GPIO_Init+0x2d8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d101      	bne.n	80018c6 <HAL_GPIO_Init+0x1d6>
 80018c2:	2303      	movs	r3, #3
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x1e4>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x1e4>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x1e4>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x1e4>
 80018d2:	2300      	movs	r3, #0
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	2103      	movs	r1, #3
 80018d8:	400a      	ands	r2, r1
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e4:	4935      	ldr	r1, [pc, #212]	; (80019bc <HAL_GPIO_Init+0x2cc>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	025b      	lsls	r3, r3, #9
 800190a:	4013      	ands	r3, r2
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001916:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43da      	mvns	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	035b      	lsls	r3, r3, #13
 800195e:	4013      	ands	r3, r2
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43da      	mvns	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	039b      	lsls	r3, r3, #14
 8001988:	4013      	ands	r3, r2
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_GPIO_Init+0x2dc>)
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	40da      	lsrs	r2, r3
 80019a8:	1e13      	subs	r3, r2, #0
 80019aa:	d000      	beq.n	80019ae <HAL_GPIO_Init+0x2be>
 80019ac:	e6a8      	b.n	8001700 <HAL_GPIO_Init+0x10>
  } 
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	46bd      	mov	sp, r7
 80019b4:	b006      	add	sp, #24
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010000 	.word	0x40010000
 80019c0:	48000400 	.word	0x48000400
 80019c4:	48000800 	.word	0x48000800
 80019c8:	48000c00 	.word	0x48000c00
 80019cc:	40010400 	.word	0x40010400

080019d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	0008      	movs	r0, r1
 80019da:	0011      	movs	r1, r2
 80019dc:	1cbb      	adds	r3, r7, #2
 80019de:	1c02      	adds	r2, r0, #0
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	1c7b      	adds	r3, r7, #1
 80019e4:	1c0a      	adds	r2, r1, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019e8:	1c7b      	adds	r3, r7, #1
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d004      	beq.n	80019fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019f0:	1cbb      	adds	r3, r7, #2
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019fa:	1cbb      	adds	r3, r7, #2
 80019fc:	881a      	ldrh	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b002      	add	sp, #8
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	0002      	movs	r2, r0
 8001a14:	1dbb      	adds	r3, r7, #6
 8001a16:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	1dba      	adds	r2, r7, #6
 8001a1e:	8812      	ldrh	r2, [r2, #0]
 8001a20:	4013      	ands	r3, r2
 8001a22:	d008      	beq.n	8001a36 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001a26:	1dba      	adds	r2, r7, #6
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a2c:	1dbb      	adds	r3, r7, #6
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 f807 	bl	8001a44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	1dbb      	adds	r3, r7, #6
 8001a4e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e301      	b.n	800206e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1e>
 8001a74:	e08d      	b.n	8001b92 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a76:	4bc3      	ldr	r3, [pc, #780]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d00e      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a82:	4bc0      	ldr	r3, [pc, #768]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	220c      	movs	r2, #12
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x64>
 8001a8e:	4bbd      	ldr	r3, [pc, #756]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	401a      	ands	r2, r3
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10d      	bne.n	8001abc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa0:	4bb8      	ldr	r3, [pc, #736]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	029b      	lsls	r3, r3, #10
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d100      	bne.n	8001aae <HAL_RCC_OscConfig+0x56>
 8001aac:	e070      	b.n	8001b90 <HAL_RCC_OscConfig+0x138>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d000      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x60>
 8001ab6:	e06b      	b.n	8001b90 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e2d8      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x7c>
 8001ac4:	4baf      	ldr	r3, [pc, #700]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4bae      	ldr	r3, [pc, #696]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	0249      	lsls	r1, r1, #9
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e02f      	b.n	8001b34 <HAL_RCC_OscConfig+0xdc>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x9e>
 8001adc:	4ba9      	ldr	r3, [pc, #676]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4ba8      	ldr	r3, [pc, #672]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	49a9      	ldr	r1, [pc, #676]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	4ba6      	ldr	r3, [pc, #664]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4ba5      	ldr	r3, [pc, #660]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	49a7      	ldr	r1, [pc, #668]	; (8001d8c <HAL_RCC_OscConfig+0x334>)
 8001af0:	400a      	ands	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e01e      	b.n	8001b34 <HAL_RCC_OscConfig+0xdc>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10e      	bne.n	8001b1c <HAL_RCC_OscConfig+0xc4>
 8001afe:	4ba1      	ldr	r3, [pc, #644]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b04:	2180      	movs	r1, #128	; 0x80
 8001b06:	02c9      	lsls	r1, r1, #11
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	4b9d      	ldr	r3, [pc, #628]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b9c      	ldr	r3, [pc, #624]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	0249      	lsls	r1, r1, #9
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xdc>
 8001b1c:	4b99      	ldr	r3, [pc, #612]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b98      	ldr	r3, [pc, #608]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	4999      	ldr	r1, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b95      	ldr	r3, [pc, #596]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	4997      	ldr	r1, [pc, #604]	; (8001d8c <HAL_RCC_OscConfig+0x334>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d014      	beq.n	8001b66 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7fe ffaa 	bl	8000a94 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b46:	f7fe ffa5 	bl	8000a94 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b64      	cmp	r3, #100	; 0x64
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e28a      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b58:	4b8a      	ldr	r3, [pc, #552]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	029b      	lsls	r3, r3, #10
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0xee>
 8001b64:	e015      	b.n	8001b92 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7fe ff95 	bl	8000a94 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b70:	f7fe ff90 	bl	8000a94 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e275      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	029b      	lsls	r3, r3, #10
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x118>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d100      	bne.n	8001b9e <HAL_RCC_OscConfig+0x146>
 8001b9c:	e069      	b.n	8001c72 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b9e:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba8:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	220c      	movs	r2, #12
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d11c      	bne.n	8001bee <HAL_RCC_OscConfig+0x196>
 8001bb4:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d116      	bne.n	8001bee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc0:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e24b      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	22f8      	movs	r2, #248	; 0xf8
 8001bdc:	4393      	bics	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00da      	lsls	r2, r3, #3
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bec:	e041      	b.n	8001c72 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d024      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf6:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b62      	ldr	r3, [pc, #392]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7fe ff47 	bl	8000a94 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7fe ff42 	bl	8000a94 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e227      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b59      	ldr	r3, [pc, #356]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0f1      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	22f8      	movs	r2, #248	; 0xf8
 8001c2e:	4393      	bics	r3, r2
 8001c30:	0019      	movs	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00da      	lsls	r2, r3, #3
 8001c38:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b4f      	ldr	r3, [pc, #316]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c46:	2101      	movs	r1, #1
 8001c48:	438a      	bics	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7fe ff22 	bl	8000a94 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c56:	f7fe ff1d 	bl	8000a94 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e202      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d1f1      	bne.n	8001c56 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d036      	beq.n	8001cea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d019      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c88:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c90:	f7fe ff00 	bl	8000a94 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7fe fefb 	bl	8000a94 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1e0      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d0f1      	beq.n	8001c9a <HAL_RCC_OscConfig+0x242>
 8001cb6:	e018      	b.n	8001cea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7fe fee6 	bl	8000a94 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cce:	f7fe fee1 	bl	8000a94 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1c6      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d1f1      	bne.n	8001cce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x29e>
 8001cf4:	e0b4      	b.n	8001e60 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	201f      	movs	r0, #31
 8001cf8:	183b      	adds	r3, r7, r0
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d00:	69da      	ldr	r2, [r3, #28]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	055b      	lsls	r3, r3, #21
 8001d06:	4013      	ands	r3, r2
 8001d08:	d110      	bne.n	8001d2c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0549      	lsls	r1, r1, #21
 8001d14:	430a      	orrs	r2, r1
 8001d16:	61da      	str	r2, [r3, #28]
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	055b      	lsls	r3, r3, #21
 8001d20:	4013      	ands	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	d11a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	0049      	lsls	r1, r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7fe fea5 	bl	8000a94 <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7fe fea0 	bl	8000a94 <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e185      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10e      	bne.n	8001d94 <HAL_RCC_OscConfig+0x33c>
 8001d76:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	621a      	str	r2, [r3, #32]
 8001d82:	e035      	b.n	8001df0 <HAL_RCC_OscConfig+0x398>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	fffeffff 	.word	0xfffeffff
 8001d8c:	fffbffff 	.word	0xfffbffff
 8001d90:	40007000 	.word	0x40007000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x35e>
 8001d9c:	4bb6      	ldr	r3, [pc, #728]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	4bb5      	ldr	r3, [pc, #724]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	438a      	bics	r2, r1
 8001da6:	621a      	str	r2, [r3, #32]
 8001da8:	4bb3      	ldr	r3, [pc, #716]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001daa:	6a1a      	ldr	r2, [r3, #32]
 8001dac:	4bb2      	ldr	r3, [pc, #712]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dae:	2104      	movs	r1, #4
 8001db0:	438a      	bics	r2, r1
 8001db2:	621a      	str	r2, [r3, #32]
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x398>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x380>
 8001dbe:	4bae      	ldr	r3, [pc, #696]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	4bad      	ldr	r3, [pc, #692]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	621a      	str	r2, [r3, #32]
 8001dca:	4bab      	ldr	r3, [pc, #684]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dcc:	6a1a      	ldr	r2, [r3, #32]
 8001dce:	4baa      	ldr	r3, [pc, #680]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	621a      	str	r2, [r3, #32]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x398>
 8001dd8:	4ba7      	ldr	r3, [pc, #668]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dda:	6a1a      	ldr	r2, [r3, #32]
 8001ddc:	4ba6      	ldr	r3, [pc, #664]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	4ba4      	ldr	r3, [pc, #656]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001de6:	6a1a      	ldr	r2, [r3, #32]
 8001de8:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	438a      	bics	r2, r1
 8001dee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d014      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df8:	f7fe fe4c 	bl	8000a94 <HAL_GetTick>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	e009      	b.n	8001e16 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7fe fe47 	bl	8000a94 <HAL_GetTick>
 8001e06:	0002      	movs	r2, r0
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a9b      	ldr	r2, [pc, #620]	; (800207c <HAL_RCC_OscConfig+0x624>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e12b      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	4b98      	ldr	r3, [pc, #608]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
 8001e20:	e013      	b.n	8001e4a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7fe fe37 	bl	8000a94 <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fe32 	bl	8000a94 <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4a91      	ldr	r2, [pc, #580]	; (800207c <HAL_RCC_OscConfig+0x624>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e116      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	4b8d      	ldr	r3, [pc, #564]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	2202      	movs	r2, #2
 8001e46:	4013      	ands	r3, r2
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e4a:	231f      	movs	r3, #31
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	4b87      	ldr	r3, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e5a:	4989      	ldr	r1, [pc, #548]	; (8002080 <HAL_RCC_OscConfig+0x628>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2210      	movs	r2, #16
 8001e66:	4013      	ands	r3, r2
 8001e68:	d063      	beq.n	8001f32 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d12a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e72:	4b81      	ldr	r3, [pc, #516]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e76:	4b80      	ldr	r3, [pc, #512]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e78:	2104      	movs	r1, #4
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e7e:	4b7e      	ldr	r3, [pc, #504]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e82:	4b7d      	ldr	r3, [pc, #500]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe fe03 	bl	8000a94 <HAL_GetTick>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e94:	f7fe fdfe 	bl	8000a94 <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0e3      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ea6:	4b74      	ldr	r3, [pc, #464]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	d0f1      	beq.n	8001e94 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eb0:	4b71      	ldr	r3, [pc, #452]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	22f8      	movs	r2, #248	; 0xf8
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	00da      	lsls	r2, r3, #3
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec6:	e034      	b.n	8001f32 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	3305      	adds	r3, #5
 8001ece:	d111      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ed0:	4b69      	ldr	r3, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	438a      	bics	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001edc:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee0:	22f8      	movs	r2, #248	; 0xf8
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	00da      	lsls	r2, r3, #3
 8001eec:	4b62      	ldr	r3, [pc, #392]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef2:	e01e      	b.n	8001f32 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef4:	4b60      	ldr	r3, [pc, #384]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	4b5f      	ldr	r3, [pc, #380]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001efa:	2104      	movs	r1, #4
 8001efc:	430a      	orrs	r2, r1
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f00:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f04:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7fe fdc2 	bl	8000a94 <HAL_GetTick>
 8001f10:	0003      	movs	r3, r0
 8001f12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f16:	f7fe fdbd 	bl	8000a94 <HAL_GetTick>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0a2      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d1f1      	bne.n	8001f16 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d100      	bne.n	8001f3c <HAL_RCC_OscConfig+0x4e4>
 8001f3a:	e097      	b.n	800206c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	220c      	movs	r2, #12
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d100      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4f2>
 8001f48:	e06b      	b.n	8002022 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d14c      	bne.n	8001fec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b49      	ldr	r3, [pc, #292]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f58:	494a      	ldr	r1, [pc, #296]	; (8002084 <HAL_RCC_OscConfig+0x62c>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fd99 	bl	8000a94 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7fe fd94 	bl	8000a94 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e079      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	049b      	lsls	r3, r3, #18
 8001f82:	4013      	ands	r3, r2
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f86:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f94:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a3a      	ldr	r2, [pc, #232]	; (8002088 <HAL_RCC_OscConfig+0x630>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	431a      	orrs	r2, r3
 8001fae:	4b32      	ldr	r3, [pc, #200]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0449      	lsls	r1, r1, #17
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7fe fd67 	bl	8000a94 <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7fe fd62 	bl	8000a94 <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e047      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	049b      	lsls	r3, r3, #18
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x574>
 8001fea:	e03f      	b.n	800206c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8001ff2:	4924      	ldr	r1, [pc, #144]	; (8002084 <HAL_RCC_OscConfig+0x62c>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fd4c 	bl	8000a94 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fd47 	bl	8000a94 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e02c      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	049b      	lsls	r3, r3, #18
 800201c:	4013      	ands	r3, r2
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x5aa>
 8002020:	e024      	b.n	800206c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e01f      	b.n	800206e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x620>)
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	025b      	lsls	r3, r3, #9
 8002040:	401a      	ands	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	429a      	cmp	r2, r3
 8002048:	d10e      	bne.n	8002068 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	220f      	movs	r2, #15
 800204e:	401a      	ands	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	23f0      	movs	r3, #240	; 0xf0
 800205c:	039b      	lsls	r3, r3, #14
 800205e:	401a      	ands	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b008      	add	sp, #32
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	40021000 	.word	0x40021000
 800207c:	00001388 	.word	0x00001388
 8002080:	efffffff 	.word	0xefffffff
 8002084:	feffffff 	.word	0xfeffffff
 8002088:	ffc2ffff 	.word	0xffc2ffff

0800208c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b3      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020a0:	4b5b      	ldr	r3, [pc, #364]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d911      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4393      	bics	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	4b55      	ldr	r3, [pc, #340]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c0:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e09a      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2202      	movs	r2, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	d015      	beq.n	8002108 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2204      	movs	r2, #4
 80020e2:	4013      	ands	r3, r2
 80020e4:	d006      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020e6:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 80020ec:	21e0      	movs	r1, #224	; 0xe0
 80020ee:	00c9      	lsls	r1, r1, #3
 80020f0:	430a      	orrs	r2, r1
 80020f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	22f0      	movs	r2, #240	; 0xf0
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	4b44      	ldr	r3, [pc, #272]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 8002104:	430a      	orrs	r2, r1
 8002106:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2201      	movs	r2, #1
 800210e:	4013      	ands	r3, r2
 8002110:	d040      	beq.n	8002194 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	4013      	ands	r3, r2
 8002124:	d114      	bne.n	8002150 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06e      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	049b      	lsls	r3, r3, #18
 800213a:	4013      	ands	r3, r2
 800213c:	d108      	bne.n	8002150 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e062      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b34      	ldr	r3, [pc, #208]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e05b      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002150:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2203      	movs	r2, #3
 8002156:	4393      	bics	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 8002160:	430a      	orrs	r2, r1
 8002162:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002164:	f7fe fc96 	bl	8000a94 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216c:	e009      	b.n	8002182 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7fe fc91 	bl	8000a94 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_RCC_ClockConfig+0x18c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e042      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	220c      	movs	r2, #12
 8002188:	401a      	ands	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1ec      	bne.n	800216e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2201      	movs	r2, #1
 800219a:	4013      	ands	r3, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d211      	bcs.n	80021c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	4b18      	ldr	r3, [pc, #96]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_RCC_ClockConfig+0x184>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e020      	b.n	8002208 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2204      	movs	r2, #4
 80021cc:	4013      	ands	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_RCC_ClockConfig+0x190>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021e4:	f000 f820 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021e8:	0001      	movs	r1, r0
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <HAL_RCC_ClockConfig+0x188>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	220f      	movs	r2, #15
 80021f2:	4013      	ands	r3, r2
 80021f4:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <HAL_RCC_ClockConfig+0x194>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	000a      	movs	r2, r1
 80021fa:	40da      	lsrs	r2, r3
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x198>)
 80021fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe fc01 	bl	8000a08 <HAL_InitTick>
  
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b004      	add	sp, #16
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	00001388 	.word	0x00001388
 800221c:	fffff8ff 	.word	0xfffff8ff
 8002220:	080043d8 	.word	0x080043d8
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b08f      	sub	sp, #60	; 0x3c
 800222c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800222e:	2314      	movs	r3, #20
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	4a2b      	ldr	r2, [pc, #172]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002234:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002236:	c313      	stmia	r3!, {r0, r1, r4}
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4a29      	ldr	r2, [pc, #164]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002240:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002242:	c313      	stmia	r3!, {r0, r1, r4}
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224c:	2300      	movs	r3, #0
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002250:	2300      	movs	r3, #0
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	220c      	movs	r2, #12
 8002266:	4013      	ands	r3, r2
 8002268:	2b04      	cmp	r3, #4
 800226a:	d002      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x4a>
 800226c:	2b08      	cmp	r3, #8
 800226e:	d003      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x50>
 8002270:	e02d      	b.n	80022ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002276:	e02d      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227a:	0c9b      	lsrs	r3, r3, #18
 800227c:	220f      	movs	r2, #15
 800227e:	4013      	ands	r3, r2
 8002280:	2214      	movs	r2, #20
 8002282:	18ba      	adds	r2, r7, r2
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	220f      	movs	r2, #15
 800228e:	4013      	ands	r3, r2
 8002290:	1d3a      	adds	r2, r7, #4
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	025b      	lsls	r3, r3, #9
 800229c:	4013      	ands	r3, r2
 800229e:	d009      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a2:	4812      	ldr	r0, [pc, #72]	; (80022ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80022a4:	f7fd ff3a 	bl	800011c <__udivsi3>
 80022a8:	0003      	movs	r3, r0
 80022aa:	001a      	movs	r2, r3
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	4353      	muls	r3, r2
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
 80022b2:	e009      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b6:	000a      	movs	r2, r1
 80022b8:	0152      	lsls	r2, r2, #5
 80022ba:	1a52      	subs	r2, r2, r1
 80022bc:	0193      	lsls	r3, r2, #6
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	185b      	adds	r3, r3, r1
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022cc:	e002      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b00f      	add	sp, #60	; 0x3c
 80022dc:	bd90      	pop	{r4, r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	080043b8 	.word	0x080043b8
 80022e4:	080043c8 	.word	0x080043c8
 80022e8:	40021000 	.word	0x40021000
 80022ec:	007a1200 	.word	0x007a1200

080022f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <HAL_RCC_GetHCLKFreq+0x10>)
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002308:	f7ff fff2 	bl	80022f0 <HAL_RCC_GetHCLKFreq>
 800230c:	0001      	movs	r1, r0
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	2207      	movs	r2, #7
 8002316:	4013      	ands	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <HAL_RCC_GetPCLK1Freq+0x28>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	40d9      	lsrs	r1, r3
 800231e:	000b      	movs	r3, r1
}    
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	40021000 	.word	0x40021000
 800232c:	080043e8 	.word	0x080043e8

08002330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e042      	b.n	80023c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	223d      	movs	r2, #61	; 0x3d
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	223c      	movs	r2, #60	; 0x3c
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fa3d 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	223d      	movs	r2, #61	; 0x3d
 8002362:	2102      	movs	r1, #2
 8002364:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	0019      	movs	r1, r3
 8002370:	0010      	movs	r0, r2
 8002372:	f000 fa3f 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2246      	movs	r2, #70	; 0x46
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	223e      	movs	r2, #62	; 0x3e
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223f      	movs	r2, #63	; 0x3f
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	2101      	movs	r1, #1
 8002394:	5499      	strb	r1, [r3, r2]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2241      	movs	r2, #65	; 0x41
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2242      	movs	r2, #66	; 0x42
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2243      	movs	r2, #67	; 0x43
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2244      	movs	r2, #68	; 0x44
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2245      	movs	r2, #69	; 0x45
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	223d      	movs	r2, #61	; 0x3d
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d124      	bne.n	8002430 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d11d      	bne.n	8002430 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2203      	movs	r2, #3
 80023fa:	4252      	negs	r2, r2
 80023fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2203      	movs	r2, #3
 800240c:	4013      	ands	r3, r2
 800240e:	d004      	beq.n	800241a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f9d6 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002418:	e007      	b.n	800242a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 f9c9 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f9d5 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2204      	movs	r2, #4
 8002438:	4013      	ands	r3, r2
 800243a:	2b04      	cmp	r3, #4
 800243c:	d125      	bne.n	800248a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	2204      	movs	r2, #4
 8002446:	4013      	ands	r3, r2
 8002448:	2b04      	cmp	r3, #4
 800244a:	d11e      	bne.n	800248a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2205      	movs	r2, #5
 8002452:	4252      	negs	r2, r2
 8002454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2202      	movs	r2, #2
 800245a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	23c0      	movs	r3, #192	; 0xc0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4013      	ands	r3, r2
 8002468:	d004      	beq.n	8002474 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 f9a9 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002472:	e007      	b.n	8002484 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 f99c 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f9a8 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2208      	movs	r2, #8
 8002492:	4013      	ands	r3, r2
 8002494:	2b08      	cmp	r3, #8
 8002496:	d124      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2208      	movs	r2, #8
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11d      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2209      	movs	r2, #9
 80024ac:	4252      	negs	r2, r2
 80024ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2204      	movs	r2, #4
 80024b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2203      	movs	r2, #3
 80024be:	4013      	ands	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f000 f97d 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 80024ca:	e007      	b.n	80024dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f970 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 f97c 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2210      	movs	r2, #16
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d125      	bne.n	800253c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2210      	movs	r2, #16
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d11e      	bne.n	800253c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2211      	movs	r2, #17
 8002504:	4252      	negs	r2, r2
 8002506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2208      	movs	r2, #8
 800250c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	23c0      	movs	r3, #192	; 0xc0
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4013      	ands	r3, r2
 800251a:	d004      	beq.n	8002526 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	0018      	movs	r0, r3
 8002520:	f000 f950 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002524:	e007      	b.n	8002536 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f000 f943 	bl	80027b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 f94f 	bl	80027d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2201      	movs	r2, #1
 8002544:	4013      	ands	r3, r2
 8002546:	2b01      	cmp	r3, #1
 8002548:	d10f      	bne.n	800256a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	4013      	ands	r3, r2
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2202      	movs	r2, #2
 800255e:	4252      	negs	r2, r2
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 f91d 	bl	80027a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	4013      	ands	r3, r2
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	d10f      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	4013      	ands	r3, r2
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d108      	bne.n	8002598 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2281      	movs	r2, #129	; 0x81
 800258c:	4252      	negs	r2, r2
 800258e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 faae 	bl	8002af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2240      	movs	r2, #64	; 0x40
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d10f      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b40      	cmp	r3, #64	; 0x40
 80025b2:	d108      	bne.n	80025c6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	4252      	negs	r2, r2
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 f90f 	bl	80027e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	2220      	movs	r2, #32
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d10f      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	4013      	ands	r3, r2
 80025de:	2b20      	cmp	r3, #32
 80025e0:	d108      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2221      	movs	r2, #33	; 0x21
 80025e8:	4252      	negs	r2, r2
 80025ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 fa78 	bl	8002ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	230f      	movs	r3, #15
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	223c      	movs	r2, #60	; 0x3c
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_TIM_ConfigClockSource+0x20>
 8002618:	2302      	movs	r3, #2
 800261a:	e0bc      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x19a>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	223c      	movs	r2, #60	; 0x3c
 8002620:	2101      	movs	r1, #1
 8002622:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	223d      	movs	r2, #61	; 0x3d
 8002628:	2102      	movs	r1, #2
 800262a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2277      	movs	r2, #119	; 0x77
 8002638:	4393      	bics	r3, r2
 800263a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002640:	4013      	ands	r3, r2
 8002642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2280      	movs	r2, #128	; 0x80
 8002652:	0192      	lsls	r2, r2, #6
 8002654:	4293      	cmp	r3, r2
 8002656:	d040      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xde>
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0192      	lsls	r2, r2, #6
 800265c:	4293      	cmp	r3, r2
 800265e:	d900      	bls.n	8002662 <HAL_TIM_ConfigClockSource+0x66>
 8002660:	e088      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	0152      	lsls	r2, r2, #5
 8002666:	4293      	cmp	r3, r2
 8002668:	d100      	bne.n	800266c <HAL_TIM_ConfigClockSource+0x70>
 800266a:	e088      	b.n	800277e <HAL_TIM_ConfigClockSource+0x182>
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0152      	lsls	r2, r2, #5
 8002670:	4293      	cmp	r3, r2
 8002672:	d900      	bls.n	8002676 <HAL_TIM_ConfigClockSource+0x7a>
 8002674:	e07e      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 8002676:	2b70      	cmp	r3, #112	; 0x70
 8002678:	d018      	beq.n	80026ac <HAL_TIM_ConfigClockSource+0xb0>
 800267a:	d900      	bls.n	800267e <HAL_TIM_ConfigClockSource+0x82>
 800267c:	e07a      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 800267e:	2b60      	cmp	r3, #96	; 0x60
 8002680:	d04f      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x126>
 8002682:	d900      	bls.n	8002686 <HAL_TIM_ConfigClockSource+0x8a>
 8002684:	e076      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 8002686:	2b50      	cmp	r3, #80	; 0x50
 8002688:	d03b      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x106>
 800268a:	d900      	bls.n	800268e <HAL_TIM_ConfigClockSource+0x92>
 800268c:	e072      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d057      	beq.n	8002742 <HAL_TIM_ConfigClockSource+0x146>
 8002692:	d900      	bls.n	8002696 <HAL_TIM_ConfigClockSource+0x9a>
 8002694:	e06e      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 8002696:	2b30      	cmp	r3, #48	; 0x30
 8002698:	d063      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x166>
 800269a:	d86b      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d060      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x166>
 80026a0:	d868      	bhi.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d05d      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x166>
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d05b      	beq.n	8002762 <HAL_TIM_ConfigClockSource+0x166>
 80026aa:	e063      	b.n	8002774 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6899      	ldr	r1, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f000 f994 	bl	80029e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2277      	movs	r2, #119	; 0x77
 80026cc:	4313      	orrs	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	609a      	str	r2, [r3, #8]
      break;
 80026d8:	e052      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f000 f97d 	bl	80029e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	01c9      	lsls	r1, r1, #7
 80026fc:	430a      	orrs	r2, r1
 80026fe:	609a      	str	r2, [r3, #8]
      break;
 8002700:	e03e      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	001a      	movs	r2, r3
 8002710:	f000 f8f0 	bl	80028f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2150      	movs	r1, #80	; 0x50
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f94a 	bl	80029b4 <TIM_ITRx_SetConfig>
      break;
 8002720:	e02e      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	001a      	movs	r2, r3
 8002730:	f000 f90e 	bl	8002950 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2160      	movs	r1, #96	; 0x60
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f93a 	bl	80029b4 <TIM_ITRx_SetConfig>
      break;
 8002740:	e01e      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	001a      	movs	r2, r3
 8002750:	f000 f8d0 	bl	80028f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f92a 	bl	80029b4 <TIM_ITRx_SetConfig>
      break;
 8002760:	e00e      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	0019      	movs	r1, r3
 800276c:	0010      	movs	r0, r2
 800276e:	f000 f921 	bl	80029b4 <TIM_ITRx_SetConfig>
      break;
 8002772:	e005      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002774:	230f      	movs	r3, #15
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
      break;
 800277c:	e000      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800277e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	223d      	movs	r2, #61	; 0x3d
 8002784:	2101      	movs	r1, #1
 8002786:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	223c      	movs	r2, #60	; 0x3c
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]

  return status;
 8002790:	230f      	movs	r3, #15
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	781b      	ldrb	r3, [r3, #0]
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b004      	add	sp, #16
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	ffff00ff 	.word	0xffff00ff

080027a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b002      	add	sp, #8
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b002      	add	sp, #8
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027cc:	46c0      	nop			; (mov r8, r8)
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d008      	beq.n	800281e <TIM_Base_SetConfig+0x2a>
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	429a      	cmp	r2, r3
 8002814:	d003      	beq.n	800281e <TIM_Base_SetConfig+0x2a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a30      	ldr	r2, [pc, #192]	; (80028dc <TIM_Base_SetConfig+0xe8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d108      	bne.n	8002830 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2270      	movs	r2, #112	; 0x70
 8002822:	4393      	bics	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d018      	beq.n	800286a <TIM_Base_SetConfig+0x76>
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	05db      	lsls	r3, r3, #23
 800283e:	429a      	cmp	r2, r3
 8002840:	d013      	beq.n	800286a <TIM_Base_SetConfig+0x76>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a25      	ldr	r2, [pc, #148]	; (80028dc <TIM_Base_SetConfig+0xe8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00f      	beq.n	800286a <TIM_Base_SetConfig+0x76>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <TIM_Base_SetConfig+0xec>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00b      	beq.n	800286a <TIM_Base_SetConfig+0x76>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a23      	ldr	r2, [pc, #140]	; (80028e4 <TIM_Base_SetConfig+0xf0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x76>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <TIM_Base_SetConfig+0xf4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x76>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a21      	ldr	r2, [pc, #132]	; (80028ec <TIM_Base_SetConfig+0xf8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d108      	bne.n	800287c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <TIM_Base_SetConfig+0xfc>)
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	4393      	bics	r3, r2
 8002882:	001a      	movs	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <TIM_Base_SetConfig+0xce>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <TIM_Base_SetConfig+0xf0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <TIM_Base_SetConfig+0xce>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <TIM_Base_SetConfig+0xf4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <TIM_Base_SetConfig+0xce>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	; (80028ec <TIM_Base_SetConfig+0xf8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d103      	bne.n	80028ca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	615a      	str	r2, [r3, #20]
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40002000 	.word	0x40002000
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800
 80028f0:	fffffcff 	.word	0xfffffcff

080028f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2201      	movs	r2, #1
 800290c:	4393      	bics	r3, r2
 800290e:	001a      	movs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	22f0      	movs	r2, #240	; 0xf0
 800291e:	4393      	bics	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	220a      	movs	r2, #10
 8002930:	4393      	bics	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b006      	add	sp, #24
 800294e:	bd80      	pop	{r7, pc}

08002950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	2210      	movs	r2, #16
 8002962:	4393      	bics	r3, r2
 8002964:	001a      	movs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <TIM_TI2_ConfigInputStage+0x60>)
 800297a:	4013      	ands	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	031b      	lsls	r3, r3, #12
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	22a0      	movs	r2, #160	; 0xa0
 800298c:	4393      	bics	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	ffff0fff 	.word	0xffff0fff

080029b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2270      	movs	r2, #112	; 0x70
 80029c8:	4393      	bics	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	2207      	movs	r2, #7
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	4a09      	ldr	r2, [pc, #36]	; (8002a24 <TIM_ETR_SetConfig+0x3c>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	021a      	lsls	r2, r3, #8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b006      	add	sp, #24
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	ffff00ff 	.word	0xffff00ff

08002a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	223c      	movs	r2, #60	; 0x3c
 8002a36:	5c9b      	ldrb	r3, [r3, r2]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e047      	b.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	223c      	movs	r2, #60	; 0x3c
 8002a44:	2101      	movs	r1, #1
 8002a46:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	223d      	movs	r2, #61	; 0x3d
 8002a4c:	2102      	movs	r1, #2
 8002a4e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2270      	movs	r2, #112	; 0x70
 8002a64:	4393      	bics	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00f      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d009      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a11      	ldr	r2, [pc, #68]	; (8002adc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10c      	bne.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	4393      	bics	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	223d      	movs	r2, #61	; 0x3d
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223c      	movs	r2, #60	; 0x3c
 8002aca:	2100      	movs	r1, #0
 8002acc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b004      	add	sp, #16
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400
 8002ae0:	40014000 	.word	0x40014000

08002ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e044      	b.n	8002ba0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2274      	movs	r2, #116	; 0x74
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f7fd fe7b 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	; 0x24
 8002b32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	438a      	bics	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fbce 	bl	80032e8 <UART_SetConfig>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e024      	b.n	8002ba0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 fd01 	bl	8003568 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	490d      	ldr	r1, [pc, #52]	; (8002ba8 <HAL_UART_Init+0xa4>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	212a      	movs	r1, #42	; 0x2a
 8002b82:	438a      	bics	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 fd99 	bl	80036d0 <UART_CheckIdleState>
 8002b9e:	0003      	movs	r3, r0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	ffffb7ff 	.word	0xffffb7ff

08002bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	1dbb      	adds	r3, r7, #6
 8002bba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	d000      	beq.n	8002bc6 <HAL_UART_Transmit+0x1a>
 8002bc4:	e096      	b.n	8002cf4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_UART_Transmit+0x28>
 8002bcc:	1dbb      	adds	r3, r7, #6
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e08e      	b.n	8002cf6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	015b      	lsls	r3, r3, #5
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d109      	bne.n	8002bf8 <HAL_UART_Transmit+0x4c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d001      	beq.n	8002bf8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e07e      	b.n	8002cf6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2274      	movs	r2, #116	; 0x74
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Transmit+0x5a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e077      	b.n	8002cf6 <HAL_UART_Transmit+0x14a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2274      	movs	r2, #116	; 0x74
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	2100      	movs	r1, #0
 8002c14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2221      	movs	r2, #33	; 0x21
 8002c1a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c1c:	f7fd ff3a 	bl	8000a94 <HAL_GetTick>
 8002c20:	0003      	movs	r3, r0
 8002c22:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1dba      	adds	r2, r7, #6
 8002c28:	2150      	movs	r1, #80	; 0x50
 8002c2a:	8812      	ldrh	r2, [r2, #0]
 8002c2c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1dba      	adds	r2, r7, #6
 8002c32:	2152      	movs	r1, #82	; 0x52
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	015b      	lsls	r3, r3, #5
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d108      	bne.n	8002c56 <HAL_UART_Transmit+0xaa>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d104      	bne.n	8002c56 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e003      	b.n	8002c5e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2274      	movs	r2, #116	; 0x74
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002c66:	e02d      	b.n	8002cc4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	0013      	movs	r3, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	f000 fd73 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e039      	b.n	8002cf6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	05d2      	lsls	r2, r2, #23
 8002c92:	0dd2      	lsrs	r2, r2, #23
 8002c94:	b292      	uxth	r2, r2
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e008      	b.n	8002cb2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2252      	movs	r2, #82	; 0x52
 8002cb6:	5a9b      	ldrh	r3, [r3, r2]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2252      	movs	r2, #82	; 0x52
 8002cc2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2252      	movs	r2, #82	; 0x52
 8002cc8:	5a9b      	ldrh	r3, [r3, r2]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1cb      	bne.n	8002c68 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	0013      	movs	r3, r2
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2140      	movs	r1, #64	; 0x40
 8002cde:	f000 fd3f 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e005      	b.n	8002cf6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b008      	add	sp, #32
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b0ab      	sub	sp, #172	; 0xac
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	22a4      	movs	r2, #164	; 0xa4
 8002d10:	18b9      	adds	r1, r7, r2
 8002d12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	20a0      	movs	r0, #160	; 0xa0
 8002d1c:	1839      	adds	r1, r7, r0
 8002d1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	219c      	movs	r1, #156	; 0x9c
 8002d28:	1879      	adds	r1, r7, r1
 8002d2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d2c:	0011      	movs	r1, r2
 8002d2e:	18bb      	adds	r3, r7, r2
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a99      	ldr	r2, [pc, #612]	; (8002f98 <HAL_UART_IRQHandler+0x298>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	2298      	movs	r2, #152	; 0x98
 8002d38:	18bc      	adds	r4, r7, r2
 8002d3a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002d3c:	18bb      	adds	r3, r7, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d114      	bne.n	8002d6e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d00f      	beq.n	8002d6e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d4e:	183b      	adds	r3, r7, r0
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2220      	movs	r2, #32
 8002d54:	4013      	ands	r3, r2
 8002d56:	d00a      	beq.n	8002d6e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d100      	bne.n	8002d62 <HAL_UART_IRQHandler+0x62>
 8002d60:	e296      	b.n	8003290 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	0010      	movs	r0, r2
 8002d6a:	4798      	blx	r3
      }
      return;
 8002d6c:	e290      	b.n	8003290 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d6e:	2398      	movs	r3, #152	; 0x98
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d100      	bne.n	8002d7a <HAL_UART_IRQHandler+0x7a>
 8002d78:	e114      	b.n	8002fa4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d7a:	239c      	movs	r3, #156	; 0x9c
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	4013      	ands	r3, r2
 8002d84:	d106      	bne.n	8002d94 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d86:	23a0      	movs	r3, #160	; 0xa0
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a83      	ldr	r2, [pc, #524]	; (8002f9c <HAL_UART_IRQHandler+0x29c>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d100      	bne.n	8002d94 <HAL_UART_IRQHandler+0x94>
 8002d92:	e107      	b.n	8002fa4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d94:	23a4      	movs	r3, #164	; 0xa4
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d012      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xc6>
 8002da0:	23a0      	movs	r3, #160	; 0xa0
 8002da2:	18fb      	adds	r3, r7, r3
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2201      	movs	r2, #1
 8002db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	589b      	ldr	r3, [r3, r2]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc6:	23a4      	movs	r3, #164	; 0xa4
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d011      	beq.n	8002df6 <HAL_UART_IRQHandler+0xf6>
 8002dd2:	239c      	movs	r3, #156	; 0x9c
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2202      	movs	r2, #2
 8002de4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2280      	movs	r2, #128	; 0x80
 8002dea:	589b      	ldr	r3, [r3, r2]
 8002dec:	2204      	movs	r2, #4
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2180      	movs	r1, #128	; 0x80
 8002df4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002df6:	23a4      	movs	r3, #164	; 0xa4
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d011      	beq.n	8002e26 <HAL_UART_IRQHandler+0x126>
 8002e02:	239c      	movs	r3, #156	; 0x9c
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d00b      	beq.n	8002e26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2204      	movs	r2, #4
 8002e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	589b      	ldr	r3, [r3, r2]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2180      	movs	r1, #128	; 0x80
 8002e24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e26:	23a4      	movs	r3, #164	; 0xa4
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d017      	beq.n	8002e62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e32:	23a0      	movs	r3, #160	; 0xa0
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d105      	bne.n	8002e4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e3e:	239c      	movs	r3, #156	; 0x9c
 8002e40:	18fb      	adds	r3, r7, r3
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e48:	d00b      	beq.n	8002e62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	589b      	ldr	r3, [r3, r2]
 8002e58:	2208      	movs	r2, #8
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e62:	23a4      	movs	r3, #164	; 0xa4
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d013      	beq.n	8002e98 <HAL_UART_IRQHandler+0x198>
 8002e70:	23a0      	movs	r3, #160	; 0xa0
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	04db      	lsls	r3, r3, #19
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d00c      	beq.n	8002e98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	589b      	ldr	r3, [r3, r2]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	589b      	ldr	r3, [r3, r2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d100      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x1a4>
 8002ea2:	e1f7      	b.n	8003294 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ea4:	23a4      	movs	r3, #164	; 0xa4
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4013      	ands	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002eb0:	23a0      	movs	r3, #160	; 0xa0
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d008      	beq.n	8002ece <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	0010      	movs	r0, r2
 8002ecc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2280      	movs	r2, #128	; 0x80
 8002ed2:	589b      	ldr	r3, [r3, r2]
 8002ed4:	2194      	movs	r1, #148	; 0x94
 8002ed6:	187a      	adds	r2, r7, r1
 8002ed8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2240      	movs	r2, #64	; 0x40
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d004      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2228      	movs	r2, #40	; 0x28
 8002eee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ef0:	d047      	beq.n	8002f82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fcf7 	bl	80038e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2240      	movs	r2, #64	; 0x40
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d137      	bne.n	8002f78 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f10:	2090      	movs	r0, #144	; 0x90
 8002f12:	183a      	adds	r2, r7, r0
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	2301      	movs	r3, #1
 8002f18:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2140      	movs	r1, #64	; 0x40
 8002f2e:	438a      	bics	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d012      	beq.n	8002f6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <HAL_UART_IRQHandler+0x2a0>)
 8002f4e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fe fb85 	bl	8001664 <HAL_DMA_Abort_IT>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d01a      	beq.n	8002f94 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	0018      	movs	r0, r3
 8002f6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	e012      	b.n	8002f94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f9a5 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f76:	e00d      	b.n	8002f94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f9a0 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	e008      	b.n	8002f94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 f99b 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	2100      	movs	r1, #0
 8002f90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002f92:	e17f      	b.n	8003294 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f94:	46c0      	nop			; (mov r8, r8)
    return;
 8002f96:	e17d      	b.n	8003294 <HAL_UART_IRQHandler+0x594>
 8002f98:	0000080f 	.word	0x0000080f
 8002f9c:	04000120 	.word	0x04000120
 8002fa0:	080039ad 	.word	0x080039ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d000      	beq.n	8002fae <HAL_UART_IRQHandler+0x2ae>
 8002fac:	e131      	b.n	8003212 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002fae:	23a4      	movs	r3, #164	; 0xa4
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d100      	bne.n	8002fbc <HAL_UART_IRQHandler+0x2bc>
 8002fba:	e12a      	b.n	8003212 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fbc:	23a0      	movs	r3, #160	; 0xa0
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d100      	bne.n	8002fca <HAL_UART_IRQHandler+0x2ca>
 8002fc8:	e123      	b.n	8003212 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2210      	movs	r2, #16
 8002fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2240      	movs	r2, #64	; 0x40
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d000      	beq.n	8002fe2 <HAL_UART_IRQHandler+0x2e2>
 8002fe0:	e09b      	b.n	800311a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	217e      	movs	r1, #126	; 0x7e
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d100      	bne.n	8002ffa <HAL_UART_IRQHandler+0x2fa>
 8002ff8:	e14e      	b.n	8003298 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2258      	movs	r2, #88	; 0x58
 8002ffe:	5a9b      	ldrh	r3, [r3, r2]
 8003000:	187a      	adds	r2, r7, r1
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d300      	bcc.n	800300a <HAL_UART_IRQHandler+0x30a>
 8003008:	e146      	b.n	8003298 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	187a      	adds	r2, r7, r1
 800300e:	215a      	movs	r1, #90	; 0x5a
 8003010:	8812      	ldrh	r2, [r2, #0]
 8003012:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b20      	cmp	r3, #32
 800301c:	d06e      	beq.n	80030fc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301e:	f3ef 8310 	mrs	r3, PRIMASK
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003026:	67bb      	str	r3, [r7, #120]	; 0x78
 8003028:	2301      	movs	r3, #1
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800302e:	f383 8810 	msr	PRIMASK, r3
}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	499a      	ldr	r1, [pc, #616]	; (80032a8 <HAL_UART_IRQHandler+0x5a8>)
 8003040:	400a      	ands	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	f383 8810 	msr	PRIMASK, r3
}
 800304e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003050:	f3ef 8310 	mrs	r3, PRIMASK
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	677b      	str	r3, [r7, #116]	; 0x74
 800305a:	2301      	movs	r3, #1
 800305c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2101      	movs	r1, #1
 8003072:	438a      	bics	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307c:	f383 8810 	msr	PRIMASK, r3
}
 8003080:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003082:	f3ef 8310 	mrs	r3, PRIMASK
 8003086:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003088:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800308a:	673b      	str	r3, [r7, #112]	; 0x70
 800308c:	2301      	movs	r3, #1
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	438a      	bics	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ae:	f383 8810 	msr	PRIMASK, r3
}
 80030b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c0:	f3ef 8310 	mrs	r3, PRIMASK
 80030c4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80030c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ca:	2301      	movs	r3, #1
 80030cc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d0:	f383 8810 	msr	PRIMASK, r3
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2110      	movs	r1, #16
 80030e2:	438a      	bics	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ec:	f383 8810 	msr	PRIMASK, r3
}
 80030f0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7fe fa7c 	bl	80015f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2258      	movs	r2, #88	; 0x58
 8003100:	5a9a      	ldrh	r2, [r3, r2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	215a      	movs	r1, #90	; 0x5a
 8003106:	5a5b      	ldrh	r3, [r3, r1]
 8003108:	b29b      	uxth	r3, r3
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	0011      	movs	r1, r2
 8003112:	0018      	movs	r0, r3
 8003114:	f000 f8dc 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003118:	e0be      	b.n	8003298 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2258      	movs	r2, #88	; 0x58
 800311e:	5a99      	ldrh	r1, [r3, r2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	225a      	movs	r2, #90	; 0x5a
 8003124:	5a9b      	ldrh	r3, [r3, r2]
 8003126:	b29a      	uxth	r2, r3
 8003128:	208e      	movs	r0, #142	; 0x8e
 800312a:	183b      	adds	r3, r7, r0
 800312c:	1a8a      	subs	r2, r1, r2
 800312e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	225a      	movs	r2, #90	; 0x5a
 8003134:	5a9b      	ldrh	r3, [r3, r2]
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d100      	bne.n	800313e <HAL_UART_IRQHandler+0x43e>
 800313c:	e0ae      	b.n	800329c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800313e:	183b      	adds	r3, r7, r0
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d100      	bne.n	8003148 <HAL_UART_IRQHandler+0x448>
 8003146:	e0a9      	b.n	800329c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003148:	f3ef 8310 	mrs	r3, PRIMASK
 800314c:	60fb      	str	r3, [r7, #12]
  return(result);
 800314e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003150:	2488      	movs	r4, #136	; 0x88
 8003152:	193a      	adds	r2, r7, r4
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	2301      	movs	r3, #1
 8003158:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f383 8810 	msr	PRIMASK, r3
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	494f      	ldr	r1, [pc, #316]	; (80032ac <HAL_UART_IRQHandler+0x5ac>)
 800316e:	400a      	ands	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	193b      	adds	r3, r7, r4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003180:	f3ef 8310 	mrs	r3, PRIMASK
 8003184:	61bb      	str	r3, [r7, #24]
  return(result);
 8003186:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003188:	2484      	movs	r4, #132	; 0x84
 800318a:	193a      	adds	r2, r7, r4
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	2301      	movs	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	438a      	bics	r2, r1
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ca:	f3ef 8310 	mrs	r3, PRIMASK
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d2:	2480      	movs	r4, #128	; 0x80
 80031d4:	193a      	adds	r2, r7, r4
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	2301      	movs	r3, #1
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2110      	movs	r1, #16
 80031f0:	438a      	bics	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003202:	183b      	adds	r3, r7, r0
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0011      	movs	r1, r2
 800320a:	0018      	movs	r0, r3
 800320c:	f000 f860 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003210:	e044      	b.n	800329c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003212:	23a4      	movs	r3, #164	; 0xa4
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	035b      	lsls	r3, r3, #13
 800321c:	4013      	ands	r3, r2
 800321e:	d010      	beq.n	8003242 <HAL_UART_IRQHandler+0x542>
 8003220:	239c      	movs	r3, #156	; 0x9c
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	03db      	lsls	r3, r3, #15
 800322a:	4013      	ands	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	0352      	lsls	r2, r2, #13
 8003236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 fbf8 	bl	8003a30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003240:	e02f      	b.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003242:	23a4      	movs	r3, #164	; 0xa4
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	4013      	ands	r3, r2
 800324c:	d00f      	beq.n	800326e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800324e:	23a0      	movs	r3, #160	; 0xa0
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	4013      	ands	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	0010      	movs	r0, r2
 800326a:	4798      	blx	r3
    }
    return;
 800326c:	e018      	b.n	80032a0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800326e:	23a4      	movs	r3, #164	; 0xa4
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	4013      	ands	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
 800327a:	23a0      	movs	r3, #160	; 0xa0
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fba6 	bl	80039da <UART_EndTransmit_IT>
    return;
 800328e:	e008      	b.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	e006      	b.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	e004      	b.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	e002      	b.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 800329c:	46c0      	nop			; (mov r8, r8)
 800329e:	e000      	b.n	80032a2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80032a0:	46c0      	nop			; (mov r8, r8)
  }

}
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b02b      	add	sp, #172	; 0xac
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	fffffeff 	.word	0xfffffeff
 80032ac:	fffffedf 	.word	0xfffffedf

080032b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	000a      	movs	r2, r1
 80032da:	1cbb      	adds	r3, r7, #2
 80032dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f0:	231e      	movs	r3, #30
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a8d      	ldr	r2, [pc, #564]	; (800354c <UART_SetConfig+0x264>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	430a      	orrs	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a88      	ldr	r2, [pc, #544]	; (8003550 <UART_SetConfig+0x268>)
 800332e:	4013      	ands	r3, r2
 8003330:	0019      	movs	r1, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a7f      	ldr	r2, [pc, #508]	; (8003554 <UART_SetConfig+0x26c>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	430a      	orrs	r2, r1
 8003362:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a7b      	ldr	r2, [pc, #492]	; (8003558 <UART_SetConfig+0x270>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d127      	bne.n	80033be <UART_SetConfig+0xd6>
 800336e:	4b7b      	ldr	r3, [pc, #492]	; (800355c <UART_SetConfig+0x274>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	2203      	movs	r2, #3
 8003374:	4013      	ands	r3, r2
 8003376:	2b03      	cmp	r3, #3
 8003378:	d00d      	beq.n	8003396 <UART_SetConfig+0xae>
 800337a:	d81b      	bhi.n	80033b4 <UART_SetConfig+0xcc>
 800337c:	2b02      	cmp	r3, #2
 800337e:	d014      	beq.n	80033aa <UART_SetConfig+0xc2>
 8003380:	d818      	bhi.n	80033b4 <UART_SetConfig+0xcc>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <UART_SetConfig+0xa4>
 8003386:	2b01      	cmp	r3, #1
 8003388:	d00a      	beq.n	80033a0 <UART_SetConfig+0xb8>
 800338a:	e013      	b.n	80033b4 <UART_SetConfig+0xcc>
 800338c:	231f      	movs	r3, #31
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e021      	b.n	80033da <UART_SetConfig+0xf2>
 8003396:	231f      	movs	r3, #31
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2202      	movs	r2, #2
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e01c      	b.n	80033da <UART_SetConfig+0xf2>
 80033a0:	231f      	movs	r3, #31
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2204      	movs	r2, #4
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e017      	b.n	80033da <UART_SetConfig+0xf2>
 80033aa:	231f      	movs	r3, #31
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	2208      	movs	r2, #8
 80033b0:	701a      	strb	r2, [r3, #0]
 80033b2:	e012      	b.n	80033da <UART_SetConfig+0xf2>
 80033b4:	231f      	movs	r3, #31
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	2210      	movs	r2, #16
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e00d      	b.n	80033da <UART_SetConfig+0xf2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a67      	ldr	r2, [pc, #412]	; (8003560 <UART_SetConfig+0x278>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d104      	bne.n	80033d2 <UART_SetConfig+0xea>
 80033c8:	231f      	movs	r3, #31
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e003      	b.n	80033da <UART_SetConfig+0xf2>
 80033d2:	231f      	movs	r3, #31
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	2210      	movs	r2, #16
 80033d8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69da      	ldr	r2, [r3, #28]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d15d      	bne.n	80034a2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80033e6:	231f      	movs	r3, #31
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d015      	beq.n	800341c <UART_SetConfig+0x134>
 80033f0:	dc18      	bgt.n	8003424 <UART_SetConfig+0x13c>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d00d      	beq.n	8003412 <UART_SetConfig+0x12a>
 80033f6:	dc15      	bgt.n	8003424 <UART_SetConfig+0x13c>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <UART_SetConfig+0x11a>
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d005      	beq.n	800340c <UART_SetConfig+0x124>
 8003400:	e010      	b.n	8003424 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003402:	f7fe ff7f 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8003406:	0003      	movs	r3, r0
 8003408:	61bb      	str	r3, [r7, #24]
        break;
 800340a:	e012      	b.n	8003432 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800340c:	4b55      	ldr	r3, [pc, #340]	; (8003564 <UART_SetConfig+0x27c>)
 800340e:	61bb      	str	r3, [r7, #24]
        break;
 8003410:	e00f      	b.n	8003432 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003412:	f7fe ff09 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 8003416:	0003      	movs	r3, r0
 8003418:	61bb      	str	r3, [r7, #24]
        break;
 800341a:	e00a      	b.n	8003432 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800341c:	2380      	movs	r3, #128	; 0x80
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	61bb      	str	r3, [r7, #24]
        break;
 8003422:	e006      	b.n	8003432 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003428:	231e      	movs	r3, #30
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
        break;
 8003430:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d100      	bne.n	800343a <UART_SetConfig+0x152>
 8003438:	e07b      	b.n	8003532 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	005a      	lsls	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	18d2      	adds	r2, r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f7fc fe65 	bl	800011c <__udivsi3>
 8003452:	0003      	movs	r3, r0
 8003454:	b29b      	uxth	r3, r3
 8003456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b0f      	cmp	r3, #15
 800345c:	d91c      	bls.n	8003498 <UART_SetConfig+0x1b0>
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	025b      	lsls	r3, r3, #9
 8003464:	429a      	cmp	r2, r3
 8003466:	d217      	bcs.n	8003498 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	b29a      	uxth	r2, r3
 800346c:	200e      	movs	r0, #14
 800346e:	183b      	adds	r3, r7, r0
 8003470:	210f      	movs	r1, #15
 8003472:	438a      	bics	r2, r1
 8003474:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	085b      	lsrs	r3, r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	2207      	movs	r2, #7
 800347e:	4013      	ands	r3, r2
 8003480:	b299      	uxth	r1, r3
 8003482:	183b      	adds	r3, r7, r0
 8003484:	183a      	adds	r2, r7, r0
 8003486:	8812      	ldrh	r2, [r2, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	183a      	adds	r2, r7, r0
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	e04c      	b.n	8003532 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003498:	231e      	movs	r3, #30
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	2201      	movs	r2, #1
 800349e:	701a      	strb	r2, [r3, #0]
 80034a0:	e047      	b.n	8003532 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a2:	231f      	movs	r3, #31
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d015      	beq.n	80034d8 <UART_SetConfig+0x1f0>
 80034ac:	dc18      	bgt.n	80034e0 <UART_SetConfig+0x1f8>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00d      	beq.n	80034ce <UART_SetConfig+0x1e6>
 80034b2:	dc15      	bgt.n	80034e0 <UART_SetConfig+0x1f8>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <UART_SetConfig+0x1d6>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d005      	beq.n	80034c8 <UART_SetConfig+0x1e0>
 80034bc:	e010      	b.n	80034e0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034be:	f7fe ff21 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 80034c2:	0003      	movs	r3, r0
 80034c4:	61bb      	str	r3, [r7, #24]
        break;
 80034c6:	e012      	b.n	80034ee <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034c8:	4b26      	ldr	r3, [pc, #152]	; (8003564 <UART_SetConfig+0x27c>)
 80034ca:	61bb      	str	r3, [r7, #24]
        break;
 80034cc:	e00f      	b.n	80034ee <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ce:	f7fe feab 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80034d2:	0003      	movs	r3, r0
 80034d4:	61bb      	str	r3, [r7, #24]
        break;
 80034d6:	e00a      	b.n	80034ee <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	61bb      	str	r3, [r7, #24]
        break;
 80034de:	e006      	b.n	80034ee <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034e4:	231e      	movs	r3, #30
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
        break;
 80034ec:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01e      	beq.n	8003532 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	085a      	lsrs	r2, r3, #1
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	18d2      	adds	r2, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0019      	movs	r1, r3
 8003504:	0010      	movs	r0, r2
 8003506:	f7fc fe09 	bl	800011c <__udivsi3>
 800350a:	0003      	movs	r3, r0
 800350c:	b29b      	uxth	r3, r3
 800350e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	2b0f      	cmp	r3, #15
 8003514:	d909      	bls.n	800352a <UART_SetConfig+0x242>
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	429a      	cmp	r2, r3
 800351e:	d204      	bcs.n	800352a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	60da      	str	r2, [r3, #12]
 8003528:	e003      	b.n	8003532 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800352a:	231e      	movs	r3, #30
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800353e:	231e      	movs	r3, #30
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	781b      	ldrb	r3, [r3, #0]
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b008      	add	sp, #32
 800354a:	bd80      	pop	{r7, pc}
 800354c:	ffff69f3 	.word	0xffff69f3
 8003550:	ffffcfff 	.word	0xffffcfff
 8003554:	fffff4ff 	.word	0xfffff4ff
 8003558:	40013800 	.word	0x40013800
 800355c:	40021000 	.word	0x40021000
 8003560:	40004400 	.word	0x40004400
 8003564:	007a1200 	.word	0x007a1200

08003568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2201      	movs	r2, #1
 8003576:	4013      	ands	r3, r2
 8003578:	d00b      	beq.n	8003592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <UART_AdvFeatureConfig+0x144>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2202      	movs	r2, #2
 8003598:	4013      	ands	r3, r2
 800359a:	d00b      	beq.n	80035b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <UART_AdvFeatureConfig+0x148>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	0019      	movs	r1, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2204      	movs	r2, #4
 80035ba:	4013      	ands	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a3b      	ldr	r2, [pc, #236]	; (80036b4 <UART_AdvFeatureConfig+0x14c>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	2208      	movs	r2, #8
 80035dc:	4013      	ands	r3, r2
 80035de:	d00b      	beq.n	80035f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4a34      	ldr	r2, [pc, #208]	; (80036b8 <UART_AdvFeatureConfig+0x150>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2210      	movs	r2, #16
 80035fe:	4013      	ands	r3, r2
 8003600:	d00b      	beq.n	800361a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <UART_AdvFeatureConfig+0x154>)
 800360a:	4013      	ands	r3, r2
 800360c:	0019      	movs	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2220      	movs	r2, #32
 8003620:	4013      	ands	r3, r2
 8003622:	d00b      	beq.n	800363c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a25      	ldr	r2, [pc, #148]	; (80036c0 <UART_AdvFeatureConfig+0x158>)
 800362c:	4013      	ands	r3, r2
 800362e:	0019      	movs	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	4013      	ands	r3, r2
 8003644:	d01d      	beq.n	8003682 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a1d      	ldr	r2, [pc, #116]	; (80036c4 <UART_AdvFeatureConfig+0x15c>)
 800364e:	4013      	ands	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	035b      	lsls	r3, r3, #13
 8003666:	429a      	cmp	r2, r3
 8003668:	d10b      	bne.n	8003682 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <UART_AdvFeatureConfig+0x160>)
 8003672:	4013      	ands	r3, r2
 8003674:	0019      	movs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	4013      	ands	r3, r2
 800368a:	d00b      	beq.n	80036a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4a0e      	ldr	r2, [pc, #56]	; (80036cc <UART_AdvFeatureConfig+0x164>)
 8003694:	4013      	ands	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	605a      	str	r2, [r3, #4]
  }
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	fffdffff 	.word	0xfffdffff
 80036b0:	fffeffff 	.word	0xfffeffff
 80036b4:	fffbffff 	.word	0xfffbffff
 80036b8:	ffff7fff 	.word	0xffff7fff
 80036bc:	ffffefff 	.word	0xffffefff
 80036c0:	ffffdfff 	.word	0xffffdfff
 80036c4:	ffefffff 	.word	0xffefffff
 80036c8:	ff9fffff 	.word	0xff9fffff
 80036cc:	fff7ffff 	.word	0xfff7ffff

080036d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	2100      	movs	r1, #0
 80036de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036e0:	f7fd f9d8 	bl	8000a94 <HAL_GetTick>
 80036e4:	0003      	movs	r3, r0
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2208      	movs	r2, #8
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d10c      	bne.n	8003710 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	0391      	lsls	r1, r2, #14
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <UART_CheckIdleState+0x8c>)
 8003700:	9200      	str	r2, [sp, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	f000 f82c 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d001      	beq.n	8003710 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e021      	b.n	8003754 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2204      	movs	r2, #4
 8003718:	4013      	ands	r3, r2
 800371a:	2b04      	cmp	r3, #4
 800371c:	d10c      	bne.n	8003738 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	03d1      	lsls	r1, r2, #15
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4a0d      	ldr	r2, [pc, #52]	; (800375c <UART_CheckIdleState+0x8c>)
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	f000 f818 	bl	8003760 <UART_WaitOnFlagUntilTimeout>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e00d      	b.n	8003754 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2274      	movs	r2, #116	; 0x74
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b004      	add	sp, #16
 800375a:	bd80      	pop	{r7, pc}
 800375c:	01ffffff 	.word	0x01ffffff

08003760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b094      	sub	sp, #80	; 0x50
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	1dfb      	adds	r3, r7, #7
 800376e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003770:	e0a3      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003774:	3301      	adds	r3, #1
 8003776:	d100      	bne.n	800377a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003778:	e09f      	b.n	80038ba <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fd f98b 	bl	8000a94 <HAL_GetTick>
 800377e:	0002      	movs	r2, r0
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <UART_WaitOnFlagUntilTimeout+0x30>
 800378a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13d      	bne.n	800380c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003790:	f3ef 8310 	mrs	r3, PRIMASK
 8003794:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003796:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003798:	647b      	str	r3, [r7, #68]	; 0x44
 800379a:	2301      	movs	r3, #1
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	494c      	ldr	r1, [pc, #304]	; (80038e4 <UART_WaitOnFlagUntilTimeout+0x184>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
 80037cc:	2301      	movs	r3, #1
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2274      	movs	r2, #116	; 0x74
 8003804:	2100      	movs	r1, #0
 8003806:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e067      	b.n	80038dc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2204      	movs	r2, #4
 8003814:	4013      	ands	r3, r2
 8003816:	d050      	beq.n	80038ba <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	401a      	ands	r2, r3
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	429a      	cmp	r2, r3
 800382a:	d146      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	0112      	lsls	r2, r2, #4
 8003834:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003836:	f3ef 8310 	mrs	r3, PRIMASK
 800383a:	613b      	str	r3, [r7, #16]
  return(result);
 800383c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003840:	2301      	movs	r3, #1
 8003842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f383 8810 	msr	PRIMASK, r3
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4923      	ldr	r1, [pc, #140]	; (80038e4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003858:	400a      	ands	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	f383 8810 	msr	PRIMASK, r3
}
 8003866:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003868:	f3ef 8310 	mrs	r3, PRIMASK
 800386c:	61fb      	str	r3, [r7, #28]
  return(result);
 800386e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	64bb      	str	r3, [r7, #72]	; 0x48
 8003872:	2301      	movs	r3, #1
 8003874:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	f383 8810 	msr	PRIMASK, r3
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2101      	movs	r1, #1
 800388a:	438a      	bics	r2, r1
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f383 8810 	msr	PRIMASK, r3
}
 8003898:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	2120      	movs	r1, #32
 80038ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2274      	movs	r2, #116	; 0x74
 80038b2:	2100      	movs	r1, #0
 80038b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e010      	b.n	80038dc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4013      	ands	r3, r2
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	425a      	negs	r2, r3
 80038ca:	4153      	adcs	r3, r2
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	001a      	movs	r2, r3
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d100      	bne.n	80038da <UART_WaitOnFlagUntilTimeout+0x17a>
 80038d8:	e74b      	b.n	8003772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b014      	add	sp, #80	; 0x50
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	fffffe5f 	.word	0xfffffe5f

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	617b      	str	r3, [r7, #20]
  return(result);
 80038f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4925      	ldr	r1, [pc, #148]	; (80039a8 <UART_EndRxTransfer+0xc0>)
 8003912:	400a      	ands	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003922:	f3ef 8310 	mrs	r3, PRIMASK
 8003926:	623b      	str	r3, [r7, #32]
  return(result);
 8003928:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800392a:	633b      	str	r3, [r7, #48]	; 0x30
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f383 8810 	msr	PRIMASK, r3
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2101      	movs	r1, #1
 8003944:	438a      	bics	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003958:	2b01      	cmp	r3, #1
 800395a:	d118      	bne.n	800398e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	60bb      	str	r3, [r7, #8]
  return(result);
 8003962:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003966:	2301      	movs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2110      	movs	r1, #16
 800397e:	438a      	bics	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	665a      	str	r2, [r3, #100]	; 0x64
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b00e      	add	sp, #56	; 0x38
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	fffffedf 	.word	0xfffffedf

080039ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	225a      	movs	r2, #90	; 0x5a
 80039be:	2100      	movs	r1, #0
 80039c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2252      	movs	r2, #82	; 0x52
 80039c6:	2100      	movs	r1, #0
 80039c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fc77 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e2:	f3ef 8310 	mrs	r3, PRIMASK
 80039e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	2301      	movs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	438a      	bics	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	0018      	movs	r0, r3
 8003a24:	f7ff fc44 	bl	80032b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a38:	46c0      	nop			; (mov r8, r8)
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	b002      	add	sp, #8
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	; (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	46c0      	nop			; (mov r8, r8)
 8003a48:	20000010 	.word	0x20000010

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2600      	movs	r6, #0
 8003a50:	4d0c      	ldr	r5, [pc, #48]	; (8003a84 <__libc_init_array+0x38>)
 8003a52:	4c0d      	ldr	r4, [pc, #52]	; (8003a88 <__libc_init_array+0x3c>)
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	f000 fc8b 	bl	8004378 <_init>
 8003a62:	4d0a      	ldr	r5, [pc, #40]	; (8003a8c <__libc_init_array+0x40>)
 8003a64:	4c0a      	ldr	r4, [pc, #40]	; (8003a90 <__libc_init_array+0x44>)
 8003a66:	1b64      	subs	r4, r4, r5
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	00b3      	lsls	r3, r6, #2
 8003a72:	58eb      	ldr	r3, [r5, r3]
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	00b3      	lsls	r3, r6, #2
 8003a7c:	58eb      	ldr	r3, [r5, r3]
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	08004424 	.word	0x08004424
 8003a88:	08004424 	.word	0x08004424
 8003a8c:	08004424 	.word	0x08004424
 8003a90:	08004428 	.word	0x08004428

08003a94 <memset>:
 8003a94:	0003      	movs	r3, r0
 8003a96:	1882      	adds	r2, r0, r2
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	7019      	strb	r1, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <siprintf>:
 8003aa4:	b40e      	push	{r1, r2, r3}
 8003aa6:	b500      	push	{lr}
 8003aa8:	490b      	ldr	r1, [pc, #44]	; (8003ad8 <siprintf+0x34>)
 8003aaa:	b09c      	sub	sp, #112	; 0x70
 8003aac:	ab1d      	add	r3, sp, #116	; 0x74
 8003aae:	9002      	str	r0, [sp, #8]
 8003ab0:	9006      	str	r0, [sp, #24]
 8003ab2:	9107      	str	r1, [sp, #28]
 8003ab4:	9104      	str	r1, [sp, #16]
 8003ab6:	4809      	ldr	r0, [pc, #36]	; (8003adc <siprintf+0x38>)
 8003ab8:	4909      	ldr	r1, [pc, #36]	; (8003ae0 <siprintf+0x3c>)
 8003aba:	cb04      	ldmia	r3!, {r2}
 8003abc:	9105      	str	r1, [sp, #20]
 8003abe:	6800      	ldr	r0, [r0, #0]
 8003ac0:	a902      	add	r1, sp, #8
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	f000 f870 	bl	8003ba8 <_svfiprintf_r>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9a02      	ldr	r2, [sp, #8]
 8003acc:	7013      	strb	r3, [r2, #0]
 8003ace:	b01c      	add	sp, #112	; 0x70
 8003ad0:	bc08      	pop	{r3}
 8003ad2:	b003      	add	sp, #12
 8003ad4:	4718      	bx	r3
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	7fffffff 	.word	0x7fffffff
 8003adc:	20000010 	.word	0x20000010
 8003ae0:	ffff0208 	.word	0xffff0208

08003ae4 <__ssputs_r>:
 8003ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae6:	688e      	ldr	r6, [r1, #8]
 8003ae8:	b085      	sub	sp, #20
 8003aea:	0007      	movs	r7, r0
 8003aec:	000c      	movs	r4, r1
 8003aee:	9203      	str	r2, [sp, #12]
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	429e      	cmp	r6, r3
 8003af4:	d83c      	bhi.n	8003b70 <__ssputs_r+0x8c>
 8003af6:	2390      	movs	r3, #144	; 0x90
 8003af8:	898a      	ldrh	r2, [r1, #12]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	421a      	tst	r2, r3
 8003afe:	d034      	beq.n	8003b6a <__ssputs_r+0x86>
 8003b00:	6909      	ldr	r1, [r1, #16]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	6960      	ldr	r0, [r4, #20]
 8003b06:	1a5b      	subs	r3, r3, r1
 8003b08:	9302      	str	r3, [sp, #8]
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	4343      	muls	r3, r0
 8003b0e:	0fdd      	lsrs	r5, r3, #31
 8003b10:	18ed      	adds	r5, r5, r3
 8003b12:	9b01      	ldr	r3, [sp, #4]
 8003b14:	9802      	ldr	r0, [sp, #8]
 8003b16:	3301      	adds	r3, #1
 8003b18:	181b      	adds	r3, r3, r0
 8003b1a:	106d      	asrs	r5, r5, #1
 8003b1c:	42ab      	cmp	r3, r5
 8003b1e:	d900      	bls.n	8003b22 <__ssputs_r+0x3e>
 8003b20:	001d      	movs	r5, r3
 8003b22:	0553      	lsls	r3, r2, #21
 8003b24:	d532      	bpl.n	8003b8c <__ssputs_r+0xa8>
 8003b26:	0029      	movs	r1, r5
 8003b28:	0038      	movs	r0, r7
 8003b2a:	f000 fb53 	bl	80041d4 <_malloc_r>
 8003b2e:	1e06      	subs	r6, r0, #0
 8003b30:	d109      	bne.n	8003b46 <__ssputs_r+0x62>
 8003b32:	230c      	movs	r3, #12
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	2001      	movs	r0, #1
 8003b3a:	89a2      	ldrh	r2, [r4, #12]
 8003b3c:	4240      	negs	r0, r0
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	b005      	add	sp, #20
 8003b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b46:	9a02      	ldr	r2, [sp, #8]
 8003b48:	6921      	ldr	r1, [r4, #16]
 8003b4a:	f000 faba 	bl	80040c2 <memcpy>
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <__ssputs_r+0xc0>)
 8003b52:	401a      	ands	r2, r3
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	4313      	orrs	r3, r2
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	9b02      	ldr	r3, [sp, #8]
 8003b5c:	6126      	str	r6, [r4, #16]
 8003b5e:	18f6      	adds	r6, r6, r3
 8003b60:	6026      	str	r6, [r4, #0]
 8003b62:	6165      	str	r5, [r4, #20]
 8003b64:	9e01      	ldr	r6, [sp, #4]
 8003b66:	1aed      	subs	r5, r5, r3
 8003b68:	60a5      	str	r5, [r4, #8]
 8003b6a:	9b01      	ldr	r3, [sp, #4]
 8003b6c:	429e      	cmp	r6, r3
 8003b6e:	d900      	bls.n	8003b72 <__ssputs_r+0x8e>
 8003b70:	9e01      	ldr	r6, [sp, #4]
 8003b72:	0032      	movs	r2, r6
 8003b74:	9903      	ldr	r1, [sp, #12]
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	f000 faac 	bl	80040d4 <memmove>
 8003b7c:	68a3      	ldr	r3, [r4, #8]
 8003b7e:	2000      	movs	r0, #0
 8003b80:	1b9b      	subs	r3, r3, r6
 8003b82:	60a3      	str	r3, [r4, #8]
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	199e      	adds	r6, r3, r6
 8003b88:	6026      	str	r6, [r4, #0]
 8003b8a:	e7da      	b.n	8003b42 <__ssputs_r+0x5e>
 8003b8c:	002a      	movs	r2, r5
 8003b8e:	0038      	movs	r0, r7
 8003b90:	f000 fb96 	bl	80042c0 <_realloc_r>
 8003b94:	1e06      	subs	r6, r0, #0
 8003b96:	d1e0      	bne.n	8003b5a <__ssputs_r+0x76>
 8003b98:	0038      	movs	r0, r7
 8003b9a:	6921      	ldr	r1, [r4, #16]
 8003b9c:	f000 faae 	bl	80040fc <_free_r>
 8003ba0:	e7c7      	b.n	8003b32 <__ssputs_r+0x4e>
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	fffffb7f 	.word	0xfffffb7f

08003ba8 <_svfiprintf_r>:
 8003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003baa:	b0a1      	sub	sp, #132	; 0x84
 8003bac:	9003      	str	r0, [sp, #12]
 8003bae:	001d      	movs	r5, r3
 8003bb0:	898b      	ldrh	r3, [r1, #12]
 8003bb2:	000f      	movs	r7, r1
 8003bb4:	0016      	movs	r6, r2
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	d511      	bpl.n	8003bde <_svfiprintf_r+0x36>
 8003bba:	690b      	ldr	r3, [r1, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10e      	bne.n	8003bde <_svfiprintf_r+0x36>
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	f000 fb07 	bl	80041d4 <_malloc_r>
 8003bc6:	6038      	str	r0, [r7, #0]
 8003bc8:	6138      	str	r0, [r7, #16]
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d105      	bne.n	8003bda <_svfiprintf_r+0x32>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	9a03      	ldr	r2, [sp, #12]
 8003bd2:	3801      	subs	r0, #1
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	b021      	add	sp, #132	; 0x84
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bda:	2340      	movs	r3, #64	; 0x40
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	2300      	movs	r3, #0
 8003be0:	ac08      	add	r4, sp, #32
 8003be2:	6163      	str	r3, [r4, #20]
 8003be4:	3320      	adds	r3, #32
 8003be6:	7663      	strb	r3, [r4, #25]
 8003be8:	3310      	adds	r3, #16
 8003bea:	76a3      	strb	r3, [r4, #26]
 8003bec:	9507      	str	r5, [sp, #28]
 8003bee:	0035      	movs	r5, r6
 8003bf0:	782b      	ldrb	r3, [r5, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <_svfiprintf_r+0x52>
 8003bf6:	2b25      	cmp	r3, #37	; 0x25
 8003bf8:	d147      	bne.n	8003c8a <_svfiprintf_r+0xe2>
 8003bfa:	1bab      	subs	r3, r5, r6
 8003bfc:	9305      	str	r3, [sp, #20]
 8003bfe:	42b5      	cmp	r5, r6
 8003c00:	d00c      	beq.n	8003c1c <_svfiprintf_r+0x74>
 8003c02:	0032      	movs	r2, r6
 8003c04:	0039      	movs	r1, r7
 8003c06:	9803      	ldr	r0, [sp, #12]
 8003c08:	f7ff ff6c 	bl	8003ae4 <__ssputs_r>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d100      	bne.n	8003c12 <_svfiprintf_r+0x6a>
 8003c10:	e0ae      	b.n	8003d70 <_svfiprintf_r+0x1c8>
 8003c12:	6962      	ldr	r2, [r4, #20]
 8003c14:	9b05      	ldr	r3, [sp, #20]
 8003c16:	4694      	mov	ip, r2
 8003c18:	4463      	add	r3, ip
 8003c1a:	6163      	str	r3, [r4, #20]
 8003c1c:	782b      	ldrb	r3, [r5, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d100      	bne.n	8003c24 <_svfiprintf_r+0x7c>
 8003c22:	e0a5      	b.n	8003d70 <_svfiprintf_r+0x1c8>
 8003c24:	2201      	movs	r2, #1
 8003c26:	2300      	movs	r3, #0
 8003c28:	4252      	negs	r2, r2
 8003c2a:	6062      	str	r2, [r4, #4]
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	3254      	adds	r2, #84	; 0x54
 8003c30:	1852      	adds	r2, r2, r1
 8003c32:	1c6e      	adds	r6, r5, #1
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	60e3      	str	r3, [r4, #12]
 8003c38:	60a3      	str	r3, [r4, #8]
 8003c3a:	7013      	strb	r3, [r2, #0]
 8003c3c:	65a3      	str	r3, [r4, #88]	; 0x58
 8003c3e:	2205      	movs	r2, #5
 8003c40:	7831      	ldrb	r1, [r6, #0]
 8003c42:	4854      	ldr	r0, [pc, #336]	; (8003d94 <_svfiprintf_r+0x1ec>)
 8003c44:	f000 fa32 	bl	80040ac <memchr>
 8003c48:	1c75      	adds	r5, r6, #1
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d11f      	bne.n	8003c8e <_svfiprintf_r+0xe6>
 8003c4e:	6822      	ldr	r2, [r4, #0]
 8003c50:	06d3      	lsls	r3, r2, #27
 8003c52:	d504      	bpl.n	8003c5e <_svfiprintf_r+0xb6>
 8003c54:	2353      	movs	r3, #83	; 0x53
 8003c56:	a904      	add	r1, sp, #16
 8003c58:	185b      	adds	r3, r3, r1
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	7019      	strb	r1, [r3, #0]
 8003c5e:	0713      	lsls	r3, r2, #28
 8003c60:	d504      	bpl.n	8003c6c <_svfiprintf_r+0xc4>
 8003c62:	2353      	movs	r3, #83	; 0x53
 8003c64:	a904      	add	r1, sp, #16
 8003c66:	185b      	adds	r3, r3, r1
 8003c68:	212b      	movs	r1, #43	; 0x2b
 8003c6a:	7019      	strb	r1, [r3, #0]
 8003c6c:	7833      	ldrb	r3, [r6, #0]
 8003c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8003c70:	d016      	beq.n	8003ca0 <_svfiprintf_r+0xf8>
 8003c72:	0035      	movs	r5, r6
 8003c74:	2100      	movs	r1, #0
 8003c76:	200a      	movs	r0, #10
 8003c78:	68e3      	ldr	r3, [r4, #12]
 8003c7a:	782a      	ldrb	r2, [r5, #0]
 8003c7c:	1c6e      	adds	r6, r5, #1
 8003c7e:	3a30      	subs	r2, #48	; 0x30
 8003c80:	2a09      	cmp	r2, #9
 8003c82:	d94e      	bls.n	8003d22 <_svfiprintf_r+0x17a>
 8003c84:	2900      	cmp	r1, #0
 8003c86:	d111      	bne.n	8003cac <_svfiprintf_r+0x104>
 8003c88:	e017      	b.n	8003cba <_svfiprintf_r+0x112>
 8003c8a:	3501      	adds	r5, #1
 8003c8c:	e7b0      	b.n	8003bf0 <_svfiprintf_r+0x48>
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <_svfiprintf_r+0x1ec>)
 8003c90:	6822      	ldr	r2, [r4, #0]
 8003c92:	1ac0      	subs	r0, r0, r3
 8003c94:	2301      	movs	r3, #1
 8003c96:	4083      	lsls	r3, r0
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	002e      	movs	r6, r5
 8003c9c:	6023      	str	r3, [r4, #0]
 8003c9e:	e7ce      	b.n	8003c3e <_svfiprintf_r+0x96>
 8003ca0:	9b07      	ldr	r3, [sp, #28]
 8003ca2:	1d19      	adds	r1, r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	9107      	str	r1, [sp, #28]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	db01      	blt.n	8003cb0 <_svfiprintf_r+0x108>
 8003cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cae:	e004      	b.n	8003cba <_svfiprintf_r+0x112>
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	60e3      	str	r3, [r4, #12]
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	782b      	ldrb	r3, [r5, #0]
 8003cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8003cbe:	d10a      	bne.n	8003cd6 <_svfiprintf_r+0x12e>
 8003cc0:	786b      	ldrb	r3, [r5, #1]
 8003cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cc4:	d135      	bne.n	8003d32 <_svfiprintf_r+0x18a>
 8003cc6:	9b07      	ldr	r3, [sp, #28]
 8003cc8:	3502      	adds	r5, #2
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	9207      	str	r2, [sp, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db2b      	blt.n	8003d2c <_svfiprintf_r+0x184>
 8003cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003cd6:	4e30      	ldr	r6, [pc, #192]	; (8003d98 <_svfiprintf_r+0x1f0>)
 8003cd8:	2203      	movs	r2, #3
 8003cda:	0030      	movs	r0, r6
 8003cdc:	7829      	ldrb	r1, [r5, #0]
 8003cde:	f000 f9e5 	bl	80040ac <memchr>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d006      	beq.n	8003cf4 <_svfiprintf_r+0x14c>
 8003ce6:	2340      	movs	r3, #64	; 0x40
 8003ce8:	1b80      	subs	r0, r0, r6
 8003cea:	4083      	lsls	r3, r0
 8003cec:	6822      	ldr	r2, [r4, #0]
 8003cee:	3501      	adds	r5, #1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	7829      	ldrb	r1, [r5, #0]
 8003cf6:	2206      	movs	r2, #6
 8003cf8:	4828      	ldr	r0, [pc, #160]	; (8003d9c <_svfiprintf_r+0x1f4>)
 8003cfa:	1c6e      	adds	r6, r5, #1
 8003cfc:	7621      	strb	r1, [r4, #24]
 8003cfe:	f000 f9d5 	bl	80040ac <memchr>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d03c      	beq.n	8003d80 <_svfiprintf_r+0x1d8>
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <_svfiprintf_r+0x1f8>)
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d125      	bne.n	8003d58 <_svfiprintf_r+0x1b0>
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	9b07      	ldr	r3, [sp, #28]
 8003d10:	3307      	adds	r3, #7
 8003d12:	4393      	bics	r3, r2
 8003d14:	3308      	adds	r3, #8
 8003d16:	9307      	str	r3, [sp, #28]
 8003d18:	6963      	ldr	r3, [r4, #20]
 8003d1a:	9a04      	ldr	r2, [sp, #16]
 8003d1c:	189b      	adds	r3, r3, r2
 8003d1e:	6163      	str	r3, [r4, #20]
 8003d20:	e765      	b.n	8003bee <_svfiprintf_r+0x46>
 8003d22:	4343      	muls	r3, r0
 8003d24:	0035      	movs	r5, r6
 8003d26:	2101      	movs	r1, #1
 8003d28:	189b      	adds	r3, r3, r2
 8003d2a:	e7a6      	b.n	8003c7a <_svfiprintf_r+0xd2>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	425b      	negs	r3, r3
 8003d30:	e7d0      	b.n	8003cd4 <_svfiprintf_r+0x12c>
 8003d32:	2300      	movs	r3, #0
 8003d34:	200a      	movs	r0, #10
 8003d36:	001a      	movs	r2, r3
 8003d38:	3501      	adds	r5, #1
 8003d3a:	6063      	str	r3, [r4, #4]
 8003d3c:	7829      	ldrb	r1, [r5, #0]
 8003d3e:	1c6e      	adds	r6, r5, #1
 8003d40:	3930      	subs	r1, #48	; 0x30
 8003d42:	2909      	cmp	r1, #9
 8003d44:	d903      	bls.n	8003d4e <_svfiprintf_r+0x1a6>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0c5      	beq.n	8003cd6 <_svfiprintf_r+0x12e>
 8003d4a:	9209      	str	r2, [sp, #36]	; 0x24
 8003d4c:	e7c3      	b.n	8003cd6 <_svfiprintf_r+0x12e>
 8003d4e:	4342      	muls	r2, r0
 8003d50:	0035      	movs	r5, r6
 8003d52:	2301      	movs	r3, #1
 8003d54:	1852      	adds	r2, r2, r1
 8003d56:	e7f1      	b.n	8003d3c <_svfiprintf_r+0x194>
 8003d58:	ab07      	add	r3, sp, #28
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	003a      	movs	r2, r7
 8003d5e:	0021      	movs	r1, r4
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <_svfiprintf_r+0x1fc>)
 8003d62:	9803      	ldr	r0, [sp, #12]
 8003d64:	e000      	b.n	8003d68 <_svfiprintf_r+0x1c0>
 8003d66:	bf00      	nop
 8003d68:	9004      	str	r0, [sp, #16]
 8003d6a:	9b04      	ldr	r3, [sp, #16]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	d1d3      	bne.n	8003d18 <_svfiprintf_r+0x170>
 8003d70:	89bb      	ldrh	r3, [r7, #12]
 8003d72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d74:	065b      	lsls	r3, r3, #25
 8003d76:	d400      	bmi.n	8003d7a <_svfiprintf_r+0x1d2>
 8003d78:	e72d      	b.n	8003bd6 <_svfiprintf_r+0x2e>
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	4240      	negs	r0, r0
 8003d7e:	e72a      	b.n	8003bd6 <_svfiprintf_r+0x2e>
 8003d80:	ab07      	add	r3, sp, #28
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	003a      	movs	r2, r7
 8003d86:	0021      	movs	r1, r4
 8003d88:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <_svfiprintf_r+0x1fc>)
 8003d8a:	9803      	ldr	r0, [sp, #12]
 8003d8c:	f000 f87c 	bl	8003e88 <_printf_i>
 8003d90:	e7ea      	b.n	8003d68 <_svfiprintf_r+0x1c0>
 8003d92:	46c0      	nop			; (mov r8, r8)
 8003d94:	080043f0 	.word	0x080043f0
 8003d98:	080043f6 	.word	0x080043f6
 8003d9c:	080043fa 	.word	0x080043fa
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003ae5 	.word	0x08003ae5

08003da8 <_printf_common>:
 8003da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003daa:	0015      	movs	r5, r2
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	688a      	ldr	r2, [r1, #8]
 8003db0:	690b      	ldr	r3, [r1, #16]
 8003db2:	000c      	movs	r4, r1
 8003db4:	9000      	str	r0, [sp, #0]
 8003db6:	4293      	cmp	r3, r2
 8003db8:	da00      	bge.n	8003dbc <_printf_common+0x14>
 8003dba:	0013      	movs	r3, r2
 8003dbc:	0022      	movs	r2, r4
 8003dbe:	602b      	str	r3, [r5, #0]
 8003dc0:	3243      	adds	r2, #67	; 0x43
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	2a00      	cmp	r2, #0
 8003dc6:	d001      	beq.n	8003dcc <_printf_common+0x24>
 8003dc8:	3301      	adds	r3, #1
 8003dca:	602b      	str	r3, [r5, #0]
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	069b      	lsls	r3, r3, #26
 8003dd0:	d502      	bpl.n	8003dd8 <_printf_common+0x30>
 8003dd2:	682b      	ldr	r3, [r5, #0]
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	602b      	str	r3, [r5, #0]
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	2306      	movs	r3, #6
 8003ddc:	0017      	movs	r7, r2
 8003dde:	401f      	ands	r7, r3
 8003de0:	421a      	tst	r2, r3
 8003de2:	d027      	beq.n	8003e34 <_printf_common+0x8c>
 8003de4:	0023      	movs	r3, r4
 8003de6:	3343      	adds	r3, #67	; 0x43
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	4193      	sbcs	r3, r2
 8003dee:	6822      	ldr	r2, [r4, #0]
 8003df0:	0692      	lsls	r2, r2, #26
 8003df2:	d430      	bmi.n	8003e56 <_printf_common+0xae>
 8003df4:	0022      	movs	r2, r4
 8003df6:	9901      	ldr	r1, [sp, #4]
 8003df8:	9800      	ldr	r0, [sp, #0]
 8003dfa:	9e08      	ldr	r6, [sp, #32]
 8003dfc:	3243      	adds	r2, #67	; 0x43
 8003dfe:	47b0      	blx	r6
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d025      	beq.n	8003e50 <_printf_common+0xa8>
 8003e04:	2306      	movs	r3, #6
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	682a      	ldr	r2, [r5, #0]
 8003e0a:	68e1      	ldr	r1, [r4, #12]
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	4003      	ands	r3, r0
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d103      	bne.n	8003e1c <_printf_common+0x74>
 8003e14:	1a8d      	subs	r5, r1, r2
 8003e16:	43eb      	mvns	r3, r5
 8003e18:	17db      	asrs	r3, r3, #31
 8003e1a:	401d      	ands	r5, r3
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	6922      	ldr	r2, [r4, #16]
 8003e20:	4293      	cmp	r3, r2
 8003e22:	dd01      	ble.n	8003e28 <_printf_common+0x80>
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	18ed      	adds	r5, r5, r3
 8003e28:	2700      	movs	r7, #0
 8003e2a:	42bd      	cmp	r5, r7
 8003e2c:	d120      	bne.n	8003e70 <_printf_common+0xc8>
 8003e2e:	2000      	movs	r0, #0
 8003e30:	e010      	b.n	8003e54 <_printf_common+0xac>
 8003e32:	3701      	adds	r7, #1
 8003e34:	68e3      	ldr	r3, [r4, #12]
 8003e36:	682a      	ldr	r2, [r5, #0]
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	42bb      	cmp	r3, r7
 8003e3c:	ddd2      	ble.n	8003de4 <_printf_common+0x3c>
 8003e3e:	0022      	movs	r2, r4
 8003e40:	2301      	movs	r3, #1
 8003e42:	9901      	ldr	r1, [sp, #4]
 8003e44:	9800      	ldr	r0, [sp, #0]
 8003e46:	9e08      	ldr	r6, [sp, #32]
 8003e48:	3219      	adds	r2, #25
 8003e4a:	47b0      	blx	r6
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d1f0      	bne.n	8003e32 <_printf_common+0x8a>
 8003e50:	2001      	movs	r0, #1
 8003e52:	4240      	negs	r0, r0
 8003e54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e56:	2030      	movs	r0, #48	; 0x30
 8003e58:	18e1      	adds	r1, r4, r3
 8003e5a:	3143      	adds	r1, #67	; 0x43
 8003e5c:	7008      	strb	r0, [r1, #0]
 8003e5e:	0021      	movs	r1, r4
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	3145      	adds	r1, #69	; 0x45
 8003e64:	7809      	ldrb	r1, [r1, #0]
 8003e66:	18a2      	adds	r2, r4, r2
 8003e68:	3243      	adds	r2, #67	; 0x43
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	7011      	strb	r1, [r2, #0]
 8003e6e:	e7c1      	b.n	8003df4 <_printf_common+0x4c>
 8003e70:	0022      	movs	r2, r4
 8003e72:	2301      	movs	r3, #1
 8003e74:	9901      	ldr	r1, [sp, #4]
 8003e76:	9800      	ldr	r0, [sp, #0]
 8003e78:	9e08      	ldr	r6, [sp, #32]
 8003e7a:	321a      	adds	r2, #26
 8003e7c:	47b0      	blx	r6
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	d0e6      	beq.n	8003e50 <_printf_common+0xa8>
 8003e82:	3701      	adds	r7, #1
 8003e84:	e7d1      	b.n	8003e2a <_printf_common+0x82>
	...

08003e88 <_printf_i>:
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	b08b      	sub	sp, #44	; 0x2c
 8003e8c:	9206      	str	r2, [sp, #24]
 8003e8e:	000a      	movs	r2, r1
 8003e90:	3243      	adds	r2, #67	; 0x43
 8003e92:	9307      	str	r3, [sp, #28]
 8003e94:	9005      	str	r0, [sp, #20]
 8003e96:	9204      	str	r2, [sp, #16]
 8003e98:	7e0a      	ldrb	r2, [r1, #24]
 8003e9a:	000c      	movs	r4, r1
 8003e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e9e:	2a78      	cmp	r2, #120	; 0x78
 8003ea0:	d807      	bhi.n	8003eb2 <_printf_i+0x2a>
 8003ea2:	2a62      	cmp	r2, #98	; 0x62
 8003ea4:	d809      	bhi.n	8003eba <_printf_i+0x32>
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d100      	bne.n	8003eac <_printf_i+0x24>
 8003eaa:	e0c1      	b.n	8004030 <_printf_i+0x1a8>
 8003eac:	2a58      	cmp	r2, #88	; 0x58
 8003eae:	d100      	bne.n	8003eb2 <_printf_i+0x2a>
 8003eb0:	e08c      	b.n	8003fcc <_printf_i+0x144>
 8003eb2:	0026      	movs	r6, r4
 8003eb4:	3642      	adds	r6, #66	; 0x42
 8003eb6:	7032      	strb	r2, [r6, #0]
 8003eb8:	e022      	b.n	8003f00 <_printf_i+0x78>
 8003eba:	0010      	movs	r0, r2
 8003ebc:	3863      	subs	r0, #99	; 0x63
 8003ebe:	2815      	cmp	r0, #21
 8003ec0:	d8f7      	bhi.n	8003eb2 <_printf_i+0x2a>
 8003ec2:	f7fc f921 	bl	8000108 <__gnu_thumb1_case_shi>
 8003ec6:	0016      	.short	0x0016
 8003ec8:	fff6001f 	.word	0xfff6001f
 8003ecc:	fff6fff6 	.word	0xfff6fff6
 8003ed0:	001ffff6 	.word	0x001ffff6
 8003ed4:	fff6fff6 	.word	0xfff6fff6
 8003ed8:	fff6fff6 	.word	0xfff6fff6
 8003edc:	003600a8 	.word	0x003600a8
 8003ee0:	fff6009a 	.word	0xfff6009a
 8003ee4:	00b9fff6 	.word	0x00b9fff6
 8003ee8:	0036fff6 	.word	0x0036fff6
 8003eec:	fff6fff6 	.word	0xfff6fff6
 8003ef0:	009e      	.short	0x009e
 8003ef2:	0026      	movs	r6, r4
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	3642      	adds	r6, #66	; 0x42
 8003ef8:	1d11      	adds	r1, r2, #4
 8003efa:	6019      	str	r1, [r3, #0]
 8003efc:	6813      	ldr	r3, [r2, #0]
 8003efe:	7033      	strb	r3, [r6, #0]
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0a7      	b.n	8004054 <_printf_i+0x1cc>
 8003f04:	6808      	ldr	r0, [r1, #0]
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	1d0a      	adds	r2, r1, #4
 8003f0a:	0605      	lsls	r5, r0, #24
 8003f0c:	d50b      	bpl.n	8003f26 <_printf_i+0x9e>
 8003f0e:	680d      	ldr	r5, [r1, #0]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	da03      	bge.n	8003f1e <_printf_i+0x96>
 8003f16:	232d      	movs	r3, #45	; 0x2d
 8003f18:	9a04      	ldr	r2, [sp, #16]
 8003f1a:	426d      	negs	r5, r5
 8003f1c:	7013      	strb	r3, [r2, #0]
 8003f1e:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <_printf_i+0x21c>)
 8003f20:	270a      	movs	r7, #10
 8003f22:	9303      	str	r3, [sp, #12]
 8003f24:	e01b      	b.n	8003f5e <_printf_i+0xd6>
 8003f26:	680d      	ldr	r5, [r1, #0]
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	0641      	lsls	r1, r0, #25
 8003f2c:	d5f1      	bpl.n	8003f12 <_printf_i+0x8a>
 8003f2e:	b22d      	sxth	r5, r5
 8003f30:	e7ef      	b.n	8003f12 <_printf_i+0x8a>
 8003f32:	680d      	ldr	r5, [r1, #0]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	1d08      	adds	r0, r1, #4
 8003f38:	6018      	str	r0, [r3, #0]
 8003f3a:	062e      	lsls	r6, r5, #24
 8003f3c:	d501      	bpl.n	8003f42 <_printf_i+0xba>
 8003f3e:	680d      	ldr	r5, [r1, #0]
 8003f40:	e003      	b.n	8003f4a <_printf_i+0xc2>
 8003f42:	066d      	lsls	r5, r5, #25
 8003f44:	d5fb      	bpl.n	8003f3e <_printf_i+0xb6>
 8003f46:	680d      	ldr	r5, [r1, #0]
 8003f48:	b2ad      	uxth	r5, r5
 8003f4a:	4b56      	ldr	r3, [pc, #344]	; (80040a4 <_printf_i+0x21c>)
 8003f4c:	2708      	movs	r7, #8
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	2a6f      	cmp	r2, #111	; 0x6f
 8003f52:	d000      	beq.n	8003f56 <_printf_i+0xce>
 8003f54:	3702      	adds	r7, #2
 8003f56:	0023      	movs	r3, r4
 8003f58:	2200      	movs	r2, #0
 8003f5a:	3343      	adds	r3, #67	; 0x43
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	6863      	ldr	r3, [r4, #4]
 8003f60:	60a3      	str	r3, [r4, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	db03      	blt.n	8003f6e <_printf_i+0xe6>
 8003f66:	2204      	movs	r2, #4
 8003f68:	6821      	ldr	r1, [r4, #0]
 8003f6a:	4391      	bics	r1, r2
 8003f6c:	6021      	str	r1, [r4, #0]
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	d102      	bne.n	8003f78 <_printf_i+0xf0>
 8003f72:	9e04      	ldr	r6, [sp, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00c      	beq.n	8003f92 <_printf_i+0x10a>
 8003f78:	9e04      	ldr	r6, [sp, #16]
 8003f7a:	0028      	movs	r0, r5
 8003f7c:	0039      	movs	r1, r7
 8003f7e:	f7fc f953 	bl	8000228 <__aeabi_uidivmod>
 8003f82:	9b03      	ldr	r3, [sp, #12]
 8003f84:	3e01      	subs	r6, #1
 8003f86:	5c5b      	ldrb	r3, [r3, r1]
 8003f88:	7033      	strb	r3, [r6, #0]
 8003f8a:	002b      	movs	r3, r5
 8003f8c:	0005      	movs	r5, r0
 8003f8e:	429f      	cmp	r7, r3
 8003f90:	d9f3      	bls.n	8003f7a <_printf_i+0xf2>
 8003f92:	2f08      	cmp	r7, #8
 8003f94:	d109      	bne.n	8003faa <_printf_i+0x122>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	07db      	lsls	r3, r3, #31
 8003f9a:	d506      	bpl.n	8003faa <_printf_i+0x122>
 8003f9c:	6863      	ldr	r3, [r4, #4]
 8003f9e:	6922      	ldr	r2, [r4, #16]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	dc02      	bgt.n	8003faa <_printf_i+0x122>
 8003fa4:	2330      	movs	r3, #48	; 0x30
 8003fa6:	3e01      	subs	r6, #1
 8003fa8:	7033      	strb	r3, [r6, #0]
 8003faa:	9b04      	ldr	r3, [sp, #16]
 8003fac:	1b9b      	subs	r3, r3, r6
 8003fae:	6123      	str	r3, [r4, #16]
 8003fb0:	9b07      	ldr	r3, [sp, #28]
 8003fb2:	0021      	movs	r1, r4
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	9805      	ldr	r0, [sp, #20]
 8003fb8:	9b06      	ldr	r3, [sp, #24]
 8003fba:	aa09      	add	r2, sp, #36	; 0x24
 8003fbc:	f7ff fef4 	bl	8003da8 <_printf_common>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d14c      	bne.n	800405e <_printf_i+0x1d6>
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	4240      	negs	r0, r0
 8003fc8:	b00b      	add	sp, #44	; 0x2c
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fcc:	3145      	adds	r1, #69	; 0x45
 8003fce:	700a      	strb	r2, [r1, #0]
 8003fd0:	4a34      	ldr	r2, [pc, #208]	; (80040a4 <_printf_i+0x21c>)
 8003fd2:	9203      	str	r2, [sp, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	ca20      	ldmia	r2!, {r5}
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	0608      	lsls	r0, r1, #24
 8003fde:	d516      	bpl.n	800400e <_printf_i+0x186>
 8003fe0:	07cb      	lsls	r3, r1, #31
 8003fe2:	d502      	bpl.n	8003fea <_printf_i+0x162>
 8003fe4:	2320      	movs	r3, #32
 8003fe6:	4319      	orrs	r1, r3
 8003fe8:	6021      	str	r1, [r4, #0]
 8003fea:	2710      	movs	r7, #16
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	d1b2      	bne.n	8003f56 <_printf_i+0xce>
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	6822      	ldr	r2, [r4, #0]
 8003ff4:	439a      	bics	r2, r3
 8003ff6:	6022      	str	r2, [r4, #0]
 8003ff8:	e7ad      	b.n	8003f56 <_printf_i+0xce>
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	6809      	ldr	r1, [r1, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	0022      	movs	r2, r4
 8004004:	2178      	movs	r1, #120	; 0x78
 8004006:	3245      	adds	r2, #69	; 0x45
 8004008:	7011      	strb	r1, [r2, #0]
 800400a:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <_printf_i+0x220>)
 800400c:	e7e1      	b.n	8003fd2 <_printf_i+0x14a>
 800400e:	0648      	lsls	r0, r1, #25
 8004010:	d5e6      	bpl.n	8003fe0 <_printf_i+0x158>
 8004012:	b2ad      	uxth	r5, r5
 8004014:	e7e4      	b.n	8003fe0 <_printf_i+0x158>
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	680d      	ldr	r5, [r1, #0]
 800401a:	1d10      	adds	r0, r2, #4
 800401c:	6949      	ldr	r1, [r1, #20]
 800401e:	6018      	str	r0, [r3, #0]
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	062e      	lsls	r6, r5, #24
 8004024:	d501      	bpl.n	800402a <_printf_i+0x1a2>
 8004026:	6019      	str	r1, [r3, #0]
 8004028:	e002      	b.n	8004030 <_printf_i+0x1a8>
 800402a:	066d      	lsls	r5, r5, #25
 800402c:	d5fb      	bpl.n	8004026 <_printf_i+0x19e>
 800402e:	8019      	strh	r1, [r3, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	9e04      	ldr	r6, [sp, #16]
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	e7bb      	b.n	8003fb0 <_printf_i+0x128>
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	1d11      	adds	r1, r2, #4
 800403c:	6019      	str	r1, [r3, #0]
 800403e:	6816      	ldr	r6, [r2, #0]
 8004040:	2100      	movs	r1, #0
 8004042:	0030      	movs	r0, r6
 8004044:	6862      	ldr	r2, [r4, #4]
 8004046:	f000 f831 	bl	80040ac <memchr>
 800404a:	2800      	cmp	r0, #0
 800404c:	d001      	beq.n	8004052 <_printf_i+0x1ca>
 800404e:	1b80      	subs	r0, r0, r6
 8004050:	6060      	str	r0, [r4, #4]
 8004052:	6863      	ldr	r3, [r4, #4]
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	2300      	movs	r3, #0
 8004058:	9a04      	ldr	r2, [sp, #16]
 800405a:	7013      	strb	r3, [r2, #0]
 800405c:	e7a8      	b.n	8003fb0 <_printf_i+0x128>
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	0032      	movs	r2, r6
 8004062:	9906      	ldr	r1, [sp, #24]
 8004064:	9805      	ldr	r0, [sp, #20]
 8004066:	9d07      	ldr	r5, [sp, #28]
 8004068:	47a8      	blx	r5
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d0aa      	beq.n	8003fc4 <_printf_i+0x13c>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	079b      	lsls	r3, r3, #30
 8004072:	d415      	bmi.n	80040a0 <_printf_i+0x218>
 8004074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004076:	68e0      	ldr	r0, [r4, #12]
 8004078:	4298      	cmp	r0, r3
 800407a:	daa5      	bge.n	8003fc8 <_printf_i+0x140>
 800407c:	0018      	movs	r0, r3
 800407e:	e7a3      	b.n	8003fc8 <_printf_i+0x140>
 8004080:	0022      	movs	r2, r4
 8004082:	2301      	movs	r3, #1
 8004084:	9906      	ldr	r1, [sp, #24]
 8004086:	9805      	ldr	r0, [sp, #20]
 8004088:	9e07      	ldr	r6, [sp, #28]
 800408a:	3219      	adds	r2, #25
 800408c:	47b0      	blx	r6
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	d098      	beq.n	8003fc4 <_printf_i+0x13c>
 8004092:	3501      	adds	r5, #1
 8004094:	68e3      	ldr	r3, [r4, #12]
 8004096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	42ab      	cmp	r3, r5
 800409c:	dcf0      	bgt.n	8004080 <_printf_i+0x1f8>
 800409e:	e7e9      	b.n	8004074 <_printf_i+0x1ec>
 80040a0:	2500      	movs	r5, #0
 80040a2:	e7f7      	b.n	8004094 <_printf_i+0x20c>
 80040a4:	08004401 	.word	0x08004401
 80040a8:	08004412 	.word	0x08004412

080040ac <memchr>:
 80040ac:	b2c9      	uxtb	r1, r1
 80040ae:	1882      	adds	r2, r0, r2
 80040b0:	4290      	cmp	r0, r2
 80040b2:	d101      	bne.n	80040b8 <memchr+0xc>
 80040b4:	2000      	movs	r0, #0
 80040b6:	4770      	bx	lr
 80040b8:	7803      	ldrb	r3, [r0, #0]
 80040ba:	428b      	cmp	r3, r1
 80040bc:	d0fb      	beq.n	80040b6 <memchr+0xa>
 80040be:	3001      	adds	r0, #1
 80040c0:	e7f6      	b.n	80040b0 <memchr+0x4>

080040c2 <memcpy>:
 80040c2:	2300      	movs	r3, #0
 80040c4:	b510      	push	{r4, lr}
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d100      	bne.n	80040cc <memcpy+0xa>
 80040ca:	bd10      	pop	{r4, pc}
 80040cc:	5ccc      	ldrb	r4, [r1, r3]
 80040ce:	54c4      	strb	r4, [r0, r3]
 80040d0:	3301      	adds	r3, #1
 80040d2:	e7f8      	b.n	80040c6 <memcpy+0x4>

080040d4 <memmove>:
 80040d4:	b510      	push	{r4, lr}
 80040d6:	4288      	cmp	r0, r1
 80040d8:	d902      	bls.n	80040e0 <memmove+0xc>
 80040da:	188b      	adds	r3, r1, r2
 80040dc:	4298      	cmp	r0, r3
 80040de:	d303      	bcc.n	80040e8 <memmove+0x14>
 80040e0:	2300      	movs	r3, #0
 80040e2:	e007      	b.n	80040f4 <memmove+0x20>
 80040e4:	5c8b      	ldrb	r3, [r1, r2]
 80040e6:	5483      	strb	r3, [r0, r2]
 80040e8:	3a01      	subs	r2, #1
 80040ea:	d2fb      	bcs.n	80040e4 <memmove+0x10>
 80040ec:	bd10      	pop	{r4, pc}
 80040ee:	5ccc      	ldrb	r4, [r1, r3]
 80040f0:	54c4      	strb	r4, [r0, r3]
 80040f2:	3301      	adds	r3, #1
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1fa      	bne.n	80040ee <memmove+0x1a>
 80040f8:	e7f8      	b.n	80040ec <memmove+0x18>
	...

080040fc <_free_r>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	0005      	movs	r5, r0
 8004100:	2900      	cmp	r1, #0
 8004102:	d010      	beq.n	8004126 <_free_r+0x2a>
 8004104:	1f0c      	subs	r4, r1, #4
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da00      	bge.n	800410e <_free_r+0x12>
 800410c:	18e4      	adds	r4, r4, r3
 800410e:	0028      	movs	r0, r5
 8004110:	f000 f918 	bl	8004344 <__malloc_lock>
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <_free_r+0x90>)
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <_free_r+0x2c>
 800411c:	6063      	str	r3, [r4, #4]
 800411e:	6014      	str	r4, [r2, #0]
 8004120:	0028      	movs	r0, r5
 8004122:	f000 f917 	bl	8004354 <__malloc_unlock>
 8004126:	bd70      	pop	{r4, r5, r6, pc}
 8004128:	42a3      	cmp	r3, r4
 800412a:	d908      	bls.n	800413e <_free_r+0x42>
 800412c:	6821      	ldr	r1, [r4, #0]
 800412e:	1860      	adds	r0, r4, r1
 8004130:	4283      	cmp	r3, r0
 8004132:	d1f3      	bne.n	800411c <_free_r+0x20>
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	1841      	adds	r1, r0, r1
 800413a:	6021      	str	r1, [r4, #0]
 800413c:	e7ee      	b.n	800411c <_free_r+0x20>
 800413e:	001a      	movs	r2, r3
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <_free_r+0x4e>
 8004146:	42a3      	cmp	r3, r4
 8004148:	d9f9      	bls.n	800413e <_free_r+0x42>
 800414a:	6811      	ldr	r1, [r2, #0]
 800414c:	1850      	adds	r0, r2, r1
 800414e:	42a0      	cmp	r0, r4
 8004150:	d10b      	bne.n	800416a <_free_r+0x6e>
 8004152:	6820      	ldr	r0, [r4, #0]
 8004154:	1809      	adds	r1, r1, r0
 8004156:	1850      	adds	r0, r2, r1
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	4283      	cmp	r3, r0
 800415c:	d1e0      	bne.n	8004120 <_free_r+0x24>
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	1841      	adds	r1, r0, r1
 8004164:	6011      	str	r1, [r2, #0]
 8004166:	6053      	str	r3, [r2, #4]
 8004168:	e7da      	b.n	8004120 <_free_r+0x24>
 800416a:	42a0      	cmp	r0, r4
 800416c:	d902      	bls.n	8004174 <_free_r+0x78>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d5      	b.n	8004120 <_free_r+0x24>
 8004174:	6821      	ldr	r1, [r4, #0]
 8004176:	1860      	adds	r0, r4, r1
 8004178:	4283      	cmp	r3, r0
 800417a:	d103      	bne.n	8004184 <_free_r+0x88>
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	1841      	adds	r1, r0, r1
 8004182:	6021      	str	r1, [r4, #0]
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	6054      	str	r4, [r2, #4]
 8004188:	e7ca      	b.n	8004120 <_free_r+0x24>
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	200001fc 	.word	0x200001fc

08004190 <sbrk_aligned>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	4e0f      	ldr	r6, [pc, #60]	; (80041d0 <sbrk_aligned+0x40>)
 8004194:	000d      	movs	r5, r1
 8004196:	6831      	ldr	r1, [r6, #0]
 8004198:	0004      	movs	r4, r0
 800419a:	2900      	cmp	r1, #0
 800419c:	d102      	bne.n	80041a4 <sbrk_aligned+0x14>
 800419e:	f000 f8bf 	bl	8004320 <_sbrk_r>
 80041a2:	6030      	str	r0, [r6, #0]
 80041a4:	0029      	movs	r1, r5
 80041a6:	0020      	movs	r0, r4
 80041a8:	f000 f8ba 	bl	8004320 <_sbrk_r>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d00a      	beq.n	80041c6 <sbrk_aligned+0x36>
 80041b0:	2303      	movs	r3, #3
 80041b2:	1cc5      	adds	r5, r0, #3
 80041b4:	439d      	bics	r5, r3
 80041b6:	42a8      	cmp	r0, r5
 80041b8:	d007      	beq.n	80041ca <sbrk_aligned+0x3a>
 80041ba:	1a29      	subs	r1, r5, r0
 80041bc:	0020      	movs	r0, r4
 80041be:	f000 f8af 	bl	8004320 <_sbrk_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d101      	bne.n	80041ca <sbrk_aligned+0x3a>
 80041c6:	2501      	movs	r5, #1
 80041c8:	426d      	negs	r5, r5
 80041ca:	0028      	movs	r0, r5
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000200 	.word	0x20000200

080041d4 <_malloc_r>:
 80041d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041d6:	2203      	movs	r2, #3
 80041d8:	1ccb      	adds	r3, r1, #3
 80041da:	4393      	bics	r3, r2
 80041dc:	3308      	adds	r3, #8
 80041de:	0006      	movs	r6, r0
 80041e0:	001f      	movs	r7, r3
 80041e2:	2b0c      	cmp	r3, #12
 80041e4:	d232      	bcs.n	800424c <_malloc_r+0x78>
 80041e6:	270c      	movs	r7, #12
 80041e8:	42b9      	cmp	r1, r7
 80041ea:	d831      	bhi.n	8004250 <_malloc_r+0x7c>
 80041ec:	0030      	movs	r0, r6
 80041ee:	f000 f8a9 	bl	8004344 <__malloc_lock>
 80041f2:	4d32      	ldr	r5, [pc, #200]	; (80042bc <_malloc_r+0xe8>)
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	001c      	movs	r4, r3
 80041f8:	2c00      	cmp	r4, #0
 80041fa:	d12e      	bne.n	800425a <_malloc_r+0x86>
 80041fc:	0039      	movs	r1, r7
 80041fe:	0030      	movs	r0, r6
 8004200:	f7ff ffc6 	bl	8004190 <sbrk_aligned>
 8004204:	0004      	movs	r4, r0
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	d11e      	bne.n	8004248 <_malloc_r+0x74>
 800420a:	682c      	ldr	r4, [r5, #0]
 800420c:	0025      	movs	r5, r4
 800420e:	2d00      	cmp	r5, #0
 8004210:	d14a      	bne.n	80042a8 <_malloc_r+0xd4>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	0029      	movs	r1, r5
 8004216:	18e3      	adds	r3, r4, r3
 8004218:	0030      	movs	r0, r6
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	f000 f880 	bl	8004320 <_sbrk_r>
 8004220:	9b01      	ldr	r3, [sp, #4]
 8004222:	4283      	cmp	r3, r0
 8004224:	d143      	bne.n	80042ae <_malloc_r+0xda>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	3703      	adds	r7, #3
 800422a:	1aff      	subs	r7, r7, r3
 800422c:	2303      	movs	r3, #3
 800422e:	439f      	bics	r7, r3
 8004230:	3708      	adds	r7, #8
 8004232:	2f0c      	cmp	r7, #12
 8004234:	d200      	bcs.n	8004238 <_malloc_r+0x64>
 8004236:	270c      	movs	r7, #12
 8004238:	0039      	movs	r1, r7
 800423a:	0030      	movs	r0, r6
 800423c:	f7ff ffa8 	bl	8004190 <sbrk_aligned>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d034      	beq.n	80042ae <_malloc_r+0xda>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	19df      	adds	r7, r3, r7
 8004248:	6027      	str	r7, [r4, #0]
 800424a:	e013      	b.n	8004274 <_malloc_r+0xa0>
 800424c:	2b00      	cmp	r3, #0
 800424e:	dacb      	bge.n	80041e8 <_malloc_r+0x14>
 8004250:	230c      	movs	r3, #12
 8004252:	2500      	movs	r5, #0
 8004254:	6033      	str	r3, [r6, #0]
 8004256:	0028      	movs	r0, r5
 8004258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	1bd1      	subs	r1, r2, r7
 800425e:	d420      	bmi.n	80042a2 <_malloc_r+0xce>
 8004260:	290b      	cmp	r1, #11
 8004262:	d917      	bls.n	8004294 <_malloc_r+0xc0>
 8004264:	19e2      	adds	r2, r4, r7
 8004266:	6027      	str	r7, [r4, #0]
 8004268:	42a3      	cmp	r3, r4
 800426a:	d111      	bne.n	8004290 <_malloc_r+0xbc>
 800426c:	602a      	str	r2, [r5, #0]
 800426e:	6863      	ldr	r3, [r4, #4]
 8004270:	6011      	str	r1, [r2, #0]
 8004272:	6053      	str	r3, [r2, #4]
 8004274:	0030      	movs	r0, r6
 8004276:	0025      	movs	r5, r4
 8004278:	f000 f86c 	bl	8004354 <__malloc_unlock>
 800427c:	2207      	movs	r2, #7
 800427e:	350b      	adds	r5, #11
 8004280:	1d23      	adds	r3, r4, #4
 8004282:	4395      	bics	r5, r2
 8004284:	1aea      	subs	r2, r5, r3
 8004286:	429d      	cmp	r5, r3
 8004288:	d0e5      	beq.n	8004256 <_malloc_r+0x82>
 800428a:	1b5b      	subs	r3, r3, r5
 800428c:	50a3      	str	r3, [r4, r2]
 800428e:	e7e2      	b.n	8004256 <_malloc_r+0x82>
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	e7ec      	b.n	800426e <_malloc_r+0x9a>
 8004294:	6862      	ldr	r2, [r4, #4]
 8004296:	42a3      	cmp	r3, r4
 8004298:	d101      	bne.n	800429e <_malloc_r+0xca>
 800429a:	602a      	str	r2, [r5, #0]
 800429c:	e7ea      	b.n	8004274 <_malloc_r+0xa0>
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	e7e8      	b.n	8004274 <_malloc_r+0xa0>
 80042a2:	0023      	movs	r3, r4
 80042a4:	6864      	ldr	r4, [r4, #4]
 80042a6:	e7a7      	b.n	80041f8 <_malloc_r+0x24>
 80042a8:	002c      	movs	r4, r5
 80042aa:	686d      	ldr	r5, [r5, #4]
 80042ac:	e7af      	b.n	800420e <_malloc_r+0x3a>
 80042ae:	230c      	movs	r3, #12
 80042b0:	0030      	movs	r0, r6
 80042b2:	6033      	str	r3, [r6, #0]
 80042b4:	f000 f84e 	bl	8004354 <__malloc_unlock>
 80042b8:	e7cd      	b.n	8004256 <_malloc_r+0x82>
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	200001fc 	.word	0x200001fc

080042c0 <_realloc_r>:
 80042c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c2:	0007      	movs	r7, r0
 80042c4:	000e      	movs	r6, r1
 80042c6:	0014      	movs	r4, r2
 80042c8:	2900      	cmp	r1, #0
 80042ca:	d105      	bne.n	80042d8 <_realloc_r+0x18>
 80042cc:	0011      	movs	r1, r2
 80042ce:	f7ff ff81 	bl	80041d4 <_malloc_r>
 80042d2:	0005      	movs	r5, r0
 80042d4:	0028      	movs	r0, r5
 80042d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042d8:	2a00      	cmp	r2, #0
 80042da:	d103      	bne.n	80042e4 <_realloc_r+0x24>
 80042dc:	f7ff ff0e 	bl	80040fc <_free_r>
 80042e0:	0025      	movs	r5, r4
 80042e2:	e7f7      	b.n	80042d4 <_realloc_r+0x14>
 80042e4:	f000 f83e 	bl	8004364 <_malloc_usable_size_r>
 80042e8:	9001      	str	r0, [sp, #4]
 80042ea:	4284      	cmp	r4, r0
 80042ec:	d803      	bhi.n	80042f6 <_realloc_r+0x36>
 80042ee:	0035      	movs	r5, r6
 80042f0:	0843      	lsrs	r3, r0, #1
 80042f2:	42a3      	cmp	r3, r4
 80042f4:	d3ee      	bcc.n	80042d4 <_realloc_r+0x14>
 80042f6:	0021      	movs	r1, r4
 80042f8:	0038      	movs	r0, r7
 80042fa:	f7ff ff6b 	bl	80041d4 <_malloc_r>
 80042fe:	1e05      	subs	r5, r0, #0
 8004300:	d0e8      	beq.n	80042d4 <_realloc_r+0x14>
 8004302:	9b01      	ldr	r3, [sp, #4]
 8004304:	0022      	movs	r2, r4
 8004306:	429c      	cmp	r4, r3
 8004308:	d900      	bls.n	800430c <_realloc_r+0x4c>
 800430a:	001a      	movs	r2, r3
 800430c:	0031      	movs	r1, r6
 800430e:	0028      	movs	r0, r5
 8004310:	f7ff fed7 	bl	80040c2 <memcpy>
 8004314:	0031      	movs	r1, r6
 8004316:	0038      	movs	r0, r7
 8004318:	f7ff fef0 	bl	80040fc <_free_r>
 800431c:	e7da      	b.n	80042d4 <_realloc_r+0x14>
	...

08004320 <_sbrk_r>:
 8004320:	2300      	movs	r3, #0
 8004322:	b570      	push	{r4, r5, r6, lr}
 8004324:	4d06      	ldr	r5, [pc, #24]	; (8004340 <_sbrk_r+0x20>)
 8004326:	0004      	movs	r4, r0
 8004328:	0008      	movs	r0, r1
 800432a:	602b      	str	r3, [r5, #0]
 800432c:	f7fc faf2 	bl	8000914 <_sbrk>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d103      	bne.n	800433c <_sbrk_r+0x1c>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d000      	beq.n	800433c <_sbrk_r+0x1c>
 800433a:	6023      	str	r3, [r4, #0]
 800433c:	bd70      	pop	{r4, r5, r6, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	20000204 	.word	0x20000204

08004344 <__malloc_lock>:
 8004344:	b510      	push	{r4, lr}
 8004346:	4802      	ldr	r0, [pc, #8]	; (8004350 <__malloc_lock+0xc>)
 8004348:	f000 f814 	bl	8004374 <__retarget_lock_acquire_recursive>
 800434c:	bd10      	pop	{r4, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000208 	.word	0x20000208

08004354 <__malloc_unlock>:
 8004354:	b510      	push	{r4, lr}
 8004356:	4802      	ldr	r0, [pc, #8]	; (8004360 <__malloc_unlock+0xc>)
 8004358:	f000 f80d 	bl	8004376 <__retarget_lock_release_recursive>
 800435c:	bd10      	pop	{r4, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	20000208 	.word	0x20000208

08004364 <_malloc_usable_size_r>:
 8004364:	1f0b      	subs	r3, r1, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1f18      	subs	r0, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	da01      	bge.n	8004372 <_malloc_usable_size_r+0xe>
 800436e:	580b      	ldr	r3, [r1, r0]
 8004370:	18c0      	adds	r0, r0, r3
 8004372:	4770      	bx	lr

08004374 <__retarget_lock_acquire_recursive>:
 8004374:	4770      	bx	lr

08004376 <__retarget_lock_release_recursive>:
 8004376:	4770      	bx	lr

08004378 <_init>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr

08004384 <_fini>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr
